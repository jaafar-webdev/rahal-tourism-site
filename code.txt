The following is a digest of the repository "rahal-tourism-site".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: rahal-tourism-site
Files Analyzed: 22
Total Text Size: 24.49 KB
Estimated Tokens (text only): ~٦٬٠٩٦

--- DIRECTORY STRUCTURE ---
rahal-tourism-site/
├── locales/
│   ├── ar.json
│   └── en.json
├── src/
│   ├── app/
│   │   ├── [locale]/
│   │   │   ├── layout.tsx
│   │   │   └── page.tsx
│   │   ├── context/
│   │   │   └── I18nProvider.tsx
│   │   ├── trips/
│   │   │   ├── [slug]/
│   │   │   │   └── page.tsx
│   │   │   └── layout.tsx
│   │   └── globals.css
│   ├── components/
│   │   ├── Header.tsx
│   │   ├── PaymentForm.tsx
│   │   ├── TripCard.tsx
│   │   └── TripSection.tsx
│   ├── types/
│   │   ├── category.ts [binary]
│   │   └── trip.ts [binary]
│   └── globals.d.ts [binary]
├── eslint.config.mjs
├── next.config.ts [binary]
├── package.json
├── postcss.config.mjs
├── README.md
├── tailwind.config.ts [binary]
└── tsconfig.json


--- FILE CONTENTS ---
============================================================
FILE: locales/ar.json
============================================================
{
   "welcome": "مرحبا بك في موقعنا السياحي",
   "available_trips": "الرحلات المتاحة",
   "show_details": "عرض التفاصيل",
   "back_to_all_trips": "عودة إلى جميع الرحلات",
   "book_your_trip": "احجز رحلتك",
   "name": "الاسم",
   "email": "البريد الإلكتروني",
   "phone": "رقم الهاتف",
   "guests": "عدد الضيوف",
   "meeting_point": "مكان اللقاء",
   "confirm_booking": "تأكيد الحجز",
   "duration": "المدة",
   "price": "السعر",
   "accommodation": "نوع الإقامة"
}


============================================================
FILE: locales/en.json
============================================================
{
   "welcome": "Welcome to our Tourism Site",
   "available_trips": "Available Trips",
   "show_details": "Show Details",
   "back_to_all_trips": "Back to All Trips",
   "book_your_trip": "Book Your Trip",
   "name": "Name",
   "email": "Email",
   "phone": "Phone",
   "guests": "Guests",
   "meeting_point": "Meeting Point",
   "confirm_booking": "Confirm Booking",
   "duration": "Duration",
   "price": "Price",
   "accommodation": "Accommodation"
}


============================================================
FILE: src/app/[locale]/layout.tsx
============================================================
import type { Metadata } from "next";
import { IBM_Plex_Sans_Arabic } from "next/font/google";
import "@/app/globals.css";
import { I18nProvider } from "../context/I18nProvider";

const ibmPlexSansArabic = IBM_Plex_Sans_Arabic({
   subsets: ["arabic"],
   weight: ["400", "700"],
});

export const metadata: Metadata = {
   title: "Rahal",
   description: "A tourism website built with Next.js",
};

export default function RootLayout({
   children,
}: {
   children: React.ReactNode;
}) {
   return (
      <html data-theme="dark" dir="rtl">
         <body className={`${ibmPlexSansArabic.className} `}>
            <I18nProvider>{children}</I18nProvider>
         </body>
      </html>
   );
}


============================================================
FILE: src/app/[locale]/page.tsx
============================================================
import Header from "../../components/Header";
import TripSection from "@/components/TripSection";
import { getCategories } from "@/lib/data/get-categories";

export default async function Page({ params }: { params: Promise<{ locale: string }> }) {
   const categories = await getCategories();
   return (
      <main>
         <Header params={params} />
         <TripSection categories={categories} />
      </main>
   );
}

export const revalidate = 3600; 


============================================================
FILE: src/app/context/I18nProvider.tsx
============================================================
"use client";
import { createContext, useContext, ReactNode } from "react";
import { useParams } from "next/navigation";
import { getTranslations } from "@/lib/i18n";

type Locale = "ar" | "en";
type Translations = ReturnType<typeof getTranslations>;

interface I18nContextType {
   t: Translations;
   locale: Locale;
}

const I18nContext = createContext<I18nContextType | undefined>(undefined);

export const useI18n = () => {
   const context = useContext(I18nContext);
   if (!context) {
      throw new Error("useI18n must be used within an I18nProvider");
   }
   return context;
};

export const I18nProvider = ({ children }: { children: ReactNode }) => {
   const params = useParams();
   const locale =
      typeof params.locale === "string" && ["ar", "en"].includes(params.locale)
         ? (params.locale as Locale)
         : "ar";

   const t = getTranslations(locale);

   return (
      <I18nContext.Provider value={{ t, locale }}>
         {children}
      </I18nContext.Provider>
   );
};


============================================================
FILE: src/app/trips/[slug]/page.tsx
============================================================
import PaymentForm from "@/components/PaymentForm";
import { getCategories } from "@/lib/data/get-categories";
import { getTranslations } from "@/lib/i18n";
import Trip from "@/types/trip";
import Image from "next/image";
import Link from "next/link";

export default async function TripDetailsPage({
   params,
}: {
   params: { slug: string };
}) {
   const categories = await getCategories();
   const t = getTranslations(locale as "ar" | "en");

   let trip: Trip | undefined;
   for (const category of categories) {
      trip = category.trips.find((t) => t.id === params.slug);
      if (trip) {
         break;
      }
   }

   if (!trip) {
      return <div>Trip not found</div>;
   }

   return (
      <main className="container mx-auto p-4 md:p-8">
         <div className="mb-8">
            <Link href="/" className="text-secondary hover:underline">
               &larr; {t.back_to_all_trips}
            </Link>
         </div>
         <div className="grid md:grid-cols-2 gap-8">
            <div>
               <div className="relative h-96 rounded-lg overflow-hidden shadow-lg">
                  <Image
                     src={trip.imageUrl}
                     alt={t[trip.name as keyof typeof t]}
                     layout="fill"
                     objectFit="cover"
                  />
               </div>
               <div className="mt-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow">
                  <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                     {t[trip.name as keyof typeof t]}
                  </h1>
                  <p className="text-gray-600 dark:text-gray-400 mt-2">
                     {t[trip.description as keyof typeof t]}
                  </p>
                  <div className="mt-4 grid grid-cols-2 gap-4">
                     <p>
                        <span className="font-bold text-gray-900 dark:text-white">
                           {t.duration}:
                        </span>{" "}
                        {t[trip.duration as keyof typeof t]}
                     </p>
                     <p>
                        <span className="font-bold text-gray-900 dark:text-white">
                           {t.price}:
                        </span>{" "}
                        {t[trip.price as keyof typeof t]}
                     </p>
                     <p>
                        <span className="font-bold text-gray-900 dark:text-white">
                           {t.accommodation}:
                        </span>{" "}
                        {t[trip.accommodation as keyof typeof t]}
                     </p>
                     <p>
                        <span className="font-bold text-gray-900 dark:text-white">
                           موعد الذهاب:
                        </span>{" "}
                        {trip.departureDate}
                     </p>
                  </div>
               </div>
            </div>
            <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
               <h2 className="text-2xl font-bold mb-6 text-gray-900 dark:text-white">
                  {t.book_your_trip}
               </h2>
               <form>
                  <div className="mb-4">
                     <label
                        htmlFor="name"
                        className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                     >
                        {t.name}
                     </label>
                     <input
                        type="text"
                        id="name"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                     />
                  </div>
                  <div className="mb-4">
                     <label
                        htmlFor="email"
                        className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                     >
                        {t.email}
                     </label>
                     <input
                        type="email"
                        id="email"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                     />
                  </div>
                  <div className="mb-4">
                     <label
                        htmlFor="phone"
                        className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                     >
                        {t.phone}
                     </label>
                     <input
                        type="tel"
                        id="phone"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                     />
                  </div>
                  <div className="mb-4">
                     <label
                        htmlFor="guests"
                        className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                     >
                        {t.guests}
                     </label>
                     <input
                        type="number"
                        id="guests"
                        min="1"
                        defaultValue={trip.guests}
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                     />
                  </div>
                  <div className="mb-6">
                     <label
                        htmlFor="meeting-point"
                        className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                     >
                        {t.meeting_point}
                     </label>
                     <select
                        id="meeting-point"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-gray-900 dark:text-white"
                     >
                        {meetingPoints.map((point) => (
                           <option key={point}>{point}</option>
                        ))}
                     </select>
                  </div>
                  <button
                     type="submit"
                     className="w-full bg-primary text-secondary font-bold py-3 px-4 rounded-lg hover:bg-yellow-400 transition-colors"
                  >
                     {t.confirm_booking}
                  </button>
               </form>
               <PaymentForm price={t[trip.price as keyof typeof t]} />
            </div>
         </div>
      </main>
   );
}


============================================================
FILE: src/app/trips/layout.tsx
============================================================
export const metadata = {
  title: 'Next.js',
  description: 'Generated by Next.js',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}


============================================================
FILE: src/app/globals.css
============================================================
@import "tailwindcss";

@theme {
   --color-primary: #ffeb3b;
   --color-secondary: #000080;
   --color-background: #ffffff;
   --color-foreground: #1f2937;
}

:where([data-theme="dark"]) {
   --color-primary: #ffd54f;
   --color-secondary: #000205;
   --color-background: #111827;
   --color-foreground: #f9fafb;
}

html,
body {
   @apply bg-background text-foreground transition-colors duration-300;
}


============================================================
FILE: src/components/Header.tsx
============================================================
import { getTranslations } from "@/lib/i18n";

export default async function Header({
   params,
}: {
   params: Promise<{ locale: string }>;
}) {
   const { locale } = await params;
   const t = getTranslations(locale as "ar" | "en");

   return (
      <div className="flex flex-col justify-center items-center">
         <h1 className="text-4xl font-bold text-primary mb-12">{t.welcome}</h1>
      </div>
   );
}
   

============================================================
FILE: src/components/PaymentForm.tsx
============================================================
"use client";

import { useI18n } from "@/app/context/I18nProvider";
import { useState } from "react";

const PaymentForm = ({ price }: { price: string }) => {
   const { t } = useI18n();
   const [paymentMethod, setPaymentMethod] = useState("e-wallet");

   const renderPaymentFields = () => {
      switch (paymentMethod) {
         case "e-wallet":
            return (
               <div>
                  <p className="text-gray-700 dark:text-gray-300">
                     يرجى تحويل المبلغ إلى الرقم التالي:{" "}
                     <span className="font-bold">01234567890</span>
                  </p>
                  <div className="mt-4">
                     <label
                        htmlFor="transaction-id"
                        className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                     >
                        {t.transaction_id}
                     </label>
                     <input
                        type="text"
                        id="transaction-id"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                     />
                  </div>
               </div>
            );
         case "bank-transfer":
            return (
               <div>
                  <p className="text-gray-700 dark:text-gray-300">
                     يرجى تحويل المبلغ إلى الحساب البنكي التالي:
                     <br />
                     <span className="font-bold text-gray-900 dark:text-white">
                        البنك:
                     </span>{" "}
                     بنك مصر
                     <br />
                     <span className="font-bold text-gray-900 dark:text-white">
                        رقم الحساب:
                     </span>{" "}
                     1234567890123456
                  </p>
               </div>
            );
         case "visa":
            return (
               <div>
                  <div className="mb-4">
                     <label
                        htmlFor="card-number"
                        className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                     >
                        {t.card_number}
                     </label>
                     <input
                        type="text"
                        id="card-number"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                     />
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                     <div>
                        <label
                           htmlFor="expiry-date"
                           className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                        >
                           {t.expiry_date}
                        </label>
                        <input
                           type="text"
                           id="expiry-date"
                           placeholder="MM/YY"
                           className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                        />
                     </div>
                     <div>
                        <label
                           htmlFor="cvc"
                           className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                        >
                           {t.cvc}
                        </label>
                        <input
                           type="text"
                           id="cvc"
                           className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                        />
                     </div>
                  </div>
               </div>
            );
         default:
            return null;
      }
   };

   return (
      <div className="mt-8">
         <h3 className="text-xl font-bold mb-4">{t.payment}</h3>
         <div className="mb-4">
            <p className="text-lg text-gray-900 dark:text-white">
               {t.amount_due}:{" "}
               <span className="font-bold text-primary">{price}</span>
            </p>
         </div>
         <div className="flex space-x-4 mb-6">
            <button
               type="button"
               onClick={() => setPaymentMethod("e-wallet")}
               className={`px-4 py-2 rounded-lg ${
                  paymentMethod === "e-wallet"
                     ? "bg-primary text-secondary"
                     : "bg-gray-200"
               }`}
            >
               {t.e_wallet}
            </button>
            <button
               type="button"
               onClick={() => setPaymentMethod("bank-transfer")}
               className={`px-4 py-2 rounded-lg ${
                  paymentMethod === "bank-transfer"
                     ? "bg-primary text-secondary"
                     : "bg-gray-200"
               }`}
            >
               {t.bank_transfer}
            </button>
            <button
               type="button"
               onClick={() => setPaymentMethod("visa")}
               className={`px-4 py-2 rounded-lg ${
                  paymentMethod === "visa"
                     ? "bg-primary text-secondary"
                     : "bg-gray-200"
               }`}
            >
               {t.visa_mastercard}
            </button>
         </div>
         {renderPaymentFields()}
         <button
            type="submit"
            className="w-full mt-6 bg-secondary text-white font-bold py-3 px-4 rounded-lg hover:bg-opacity-90 transition-colors"
         >
            {t.confirm_payment}
         </button>
      </div>
   );
};

export default PaymentForm;


============================================================
FILE: src/components/TripCard.tsx
============================================================
"use client";

import Image from "next/image";
import Link from "next/link";
import { useLocalizedField } from "@/lib/useLocalizedField";
import Trip from "@/types/trip";


interface TripCardProps {
   trip: Trip;
   showDetailsText: string;
}

const TripCard: React.FC<TripCardProps> = ({
   trip,
   showDetailsText,
}) => {
    const name = useLocalizedField(trip.nameAr, trip.nameEn);
    const duration = useLocalizedField(trip.durationAr, trip.durationEn);
    const accommodation = useLocalizedField(trip.accommodationAr, trip.accommodationEn);
    const description = useLocalizedField(trip.descriptionAr, trip.descriptionEn);

   return (
      <div className="rounded-lg shadow-lg overflow-hidden bg-white dark:bg-gray-800">
         <div className="relative h-56">
            <Image src={trip.imageUrl} alt={name} fill  className="object-fill"/>
         </div>
         <div className="p-4">
            <h3 className="text-xl font-bold text-gray-900 dark:text-white">
               {name}
            </h3>
            <p className="text-gray-600 dark:text-gray-400">
               {duration}
            </p>
            <p className="text-gray-600 dark:text-gray-400">
               {trip.price.amount} {trip.price.currency}
            </p>
            <p className="text-gray-600 dark:text-gray-400">
               {accommodation}
            </p>
            <p className="text-gray-600 dark:text-gray-400">
               {description}
            </p>
            <Link href={`/trips/${trip.id}`} passHref>
               <button className="mt-4 w-full bg-primary text-secondary font-bold py-2 px-4 rounded hover:bg-yellow-400 transition-colors cursor-pointer">
                  {showDetailsText}
               </button>
            </Link>
         </div>
      </div>
   );
};

export default TripCard;


============================================================
FILE: src/components/TripSection.tsx
============================================================
"use client";
import { useI18n } from "@/app/context/I18nProvider";
import TripCard from "./TripCard";
import { useLocalizedField } from "@/lib/useLocalizedField";
import { Category } from "@/types/category";
import React from 'react';

export default function TripSection({ categories }: { categories: Category[] }) {
  const { t } = useI18n(); 

  const showDetailsText = t.show_details;

  return (
    <div>
      {categories.map((category) => (
        <CategorySection key={category.id} category={category} showDetailsText={showDetailsText} />
      ))}
    </div>
  );
}

interface CategorySectionProps {
  category: Category;
  showDetailsText: string;
}

const CategorySection: React.FC<CategorySectionProps> = ({ category, showDetailsText }) => {
  const categoryName = useLocalizedField(category.nameAr, category.nameEn);

  return (
     <section key={category.id} className="w-full mb-16">
        <h2 className="text-3xl font-bold text-center mb-8">{categoryName}</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
           {category.trips.map((trip) => (
              <TripCard
                 key={trip.id}
                 trip={trip}
                 showDetailsText={showDetailsText}
              />
           ))}
        </div>
     </section>
  );
}

============================================================
FILE: eslint.config.mjs
============================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    ignores: [
      "node_modules/**",
      ".next/**",
      "out/**",
      "build/**",
      "next-env.d.ts",
    ],
  },
];

export default eslintConfig;


============================================================
FILE: package.json
============================================================
{
  "name": "rahal-tourism-site",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "i18next": "^25.5.2",
    "next": "15.5.4",
    "next-i18next": "^11.0.0",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-i18next": "^16.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.5.4",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}


============================================================
FILE: postcss.config.mjs
============================================================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;


============================================================
FILE: README.md
============================================================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.


============================================================
FILE: tsconfig.json
============================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}