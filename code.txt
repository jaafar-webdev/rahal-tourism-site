The following is a digest of the repository "rahal-tourism-site".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: rahal-tourism-site
Files Analyzed: 48
Total Text Size: 67.55 KB
Estimated Tokens (text only): ~٢٠٬٢٥٦

--- DIRECTORY STRUCTURE ---
rahal-tourism-site/
├── locales/
│   ├── ar.json
│   └── en.json
├── src/
│   ├── app/
│   │   ├── [locale]/
│   │   │   ├── payment/
│   │   │   │   └── page.tsx
│   │   │   ├── trips/
│   │   │   │   └── [slug]/
│   │   │   │       └── page.tsx
│   │   │   ├── layout.tsx
│   │   │   └── page.tsx
│   │   └── globals.css
│   ├── components/
│   │   ├── form/
│   │   │   ├── FormLabel.tsx
│   │   │   ├── InputField.tsx
│   │   │   ├── SelectField.tsx
│   │   │   └── TextareaField.tsx
│   │   ├── ui/
│   │   │   └── Button.tsx
│   │   ├── BackToTripsLink.tsx
│   │   ├── CategorySection.tsx
│   │   ├── Header.tsx
│   │   ├── LanguageSwitcher.tsx
│   │   ├── ThemeToggle.tsx
│   │   ├── TripCard.tsx
│   │   └── TripSection.tsx
│   ├── features/
│   │   ├── booking/
│   │   │   ├── schemas/
│   │   │   │   └── booking-schema.ts [binary]
│   │   │   ├── store/
│   │   │   │   └── booking-store.ts [binary]
│   │   │   ├── BookingForm.tsx
│   │   │   ├── PersonalDetailsForm.tsx
│   │   │   └── TripDetailsForm.tsx
│   │   ├── payment/
│   │   │   ├── BookingSummary.tsx
│   │   │   ├── ConfirmationSuccess.tsx
│   │   │   ├── PaymentDetails.tsx
│   │   │   ├── PaymentFlow.tsx
│   │   │   ├── PaymentMethodSelection.tsx
│   │   │   └── types.ts [binary]
│   │   └── trip-details/
│   │       └── TripDetailsContent.tsx
│   ├── i18n/
│   │   ├── navigation.ts [binary]
│   │   ├── request.ts [binary]
│   │   └── routing.ts [binary]
│   ├── messages/
│   │   ├── ar.json
│   │   └── en.json
│   ├── types/
│   │   ├── category.ts [binary]
│   │   ├── i18n.ts [binary]
│   │   └── trip.ts [binary]
│   ├── globals.d.ts [binary]
│   └── middleware.ts [binary]
├── eslint.config.mjs
├── next.config.ts [binary]
├── package.json
├── postcss.config.mjs
├── README.md
├── tailwind.config.ts [binary]
└── tsconfig.json


--- FILE CONTENTS ---
============================================================
FILE: locales/ar.json
============================================================
{
  "welcome": "مرحبا بك في موقعنا السياحي",
  "available_trips": "الرحلات المتاحه الان",
  "honeymoon_offers": "عروض شهر العسل",
  "contact_us": "تواصل معنا",
  "email": "البريد الإلكتروني",
  "subject": "عنوان الموضوع",
  "message": "الموضوع",
  "inquiry_type": "نوع الموضوع",
  "payment_issue": "مشكلة في الدفع",
  "inquiries": "استفسارات",
  "customer_service": "تواصل مع خدمة العملاء",
  "send": "إرسال",
  "duration": "المدة",
  "price": "سعر الفرد",
  "accommodation": "مكان الاقامة",
  "show_details": "اعرض التفاصيل",
  "back_to_all_trips": "العودة إلى كل الرحلات",
  "book_your_trip": "احجز رحلتك الآن",
  "name": "الاسم",
  "phone": "رقم الهاتف",
  "guests": "عدد الأفراد",
  "meeting_point": "مكان التجمع",
  "confirm_booking": "تأكيد الحجز",
  "payment": "الدفع",
  "amount_due": "المبلغ المطلوب",
  "e_wallet": "محفظة إلكترونية",
  "bank_transfer": "تحويل بنكي",
  "visa_mastercard": "فيزا/ماستركارد",
  "transaction_id": "رقم العملية",
  "card_number": "رقم البطاقة",
  "expiry_date": "تاريخ الانتهاء",
  "cvc": "CVC",
  "confirm_payment": "تأكيد الدفع",
  "trips_we_made": "الرحلات التي قمنا بها",
  "people_traveled_with_us": "الأشخاص الذين سافروا معنا",
  "average_ratings": "متوسط التقييمات",
  "dahab_trip": "رحلة دهب",
  "dahab_duration": "4 ايام و 5 ليال",
  "dahab_price": "3000 جنيه",
  "dahab_accommodation": "فندق 5 نجوم",
  "dahab_description": "استمتع بجمال الطبيعة في دهب، مع رحلة غوص في أشهر المواقع العالمية.",
  "north_coast_trip": "رحلة الساحل الشمالي",
  "north_coast_duration": "3 ايام و 4 ليال",
  "north_coast_price": "4000 جنيه",
  "north_coast_accommodation": "شاليه على البحر",
  "north_coast_description": "استرخِ على شواطئ الساحل الشمالي الرملية واستمتع بأجواء الصيف.",
  "el_gouna_trip": "رحلة الجونة",
  "el_gouna_duration": "5 ايام و 6 ليال",
  "el_gouna_price": "6000 جنيه",
  "el_gouna_accommodation": "منتجع سياحي",
  "el_gouna_description": "تجربة فريدة في الجونة، حيث الفخامة والجمال.",
  "porto_sokhna_honeymoon": "عرض شهر العسل في بورتو السخنة",
  "porto_sokhna_duration": "3 ايام و 4 ليال",
  "porto_sokhna_price": "5500 جنيه",
  "porto_sokhna_accommodation": "جناح فندقي مطل على البحر",
  "porto_sokhna_description": "عرض رومانسي خاص لشهر العسل في بورتو السخنة.",
  "el_galala_honeymoon": "عرض شهر العسل في الجلالة",
  "el_galala_duration": "4 ايام و 5 ليال",
  "el_galala_price": "7000 جنيه",
  "el_galala_accommodation": "فندق 5 نجوم مع إطلالة بانورامية",
  "el_galala_description": "استمتعوا بأجواء ساحرة في مدينة الجلالة.",
  "sharm_grand_plaza_honeymoon": "عرض شهر العسل في شرم جراند بلازا",
  "sharm_grand_plaza_duration": "6 ايام و 7 ليال",
  "sharm_grand_plaza_price": "8500 جنيه",
  "sharm_grand_plaza_accommodation": "منتجع فاخر شامل كليًا",
  "sharm_grand_plaza_description": "تجربة لا تُنسى لشهر العسل في قلب شرم الشيخ.",
  "trip_not_found": "لم يتم العثور على رحلة",
  "Departure_time": "موعد المغادرة",
  "payment_method": "طريقة الدفع",
  "credit_card": "بطاقة ائتمان",
  "paypal": "باي بال",
  "Complete_reservation": "إتمام الحجز",
  "Booking_Information": "معلومات الحجز",
  "Full_Name": "الاسم الكامل",
  "Email_Address": "البريد الإلكتروني",
  "Phone_Number": "رقم الهاتف",
  "Number_of_Guests": "عدد الضيوف",
  "Gathering_Place": "مكان التجمع",
  "Trip_Details": "تفاصيل الرحلة",
  "Trip_Name": "اسم الرحلة",
  "Total_Price": "السعر الإجمالي",
  "currency": "جنيه",
  "Next": "التالي",
  "Choose_Payment_Method": "اختر طريقة الدفع",
  "Bank_Transfer": "تحويل بنكي",
  "E_Wallet": "محفظة إلكترونية",
  "Transfer_Details": "تفاصيل التحويل البنكي",
  "E_Wallet_Details": "تفاصيل الدفع عبر المحفظة",
  "Bank_Account_Info": "معلومات الحساب البنكي",
  "Transfer_to_account": "يرجى تحويل المبلغ إلى الحساب التالي:",
  "Account_Number": "رقم الحساب",
  "Bank_Name_Branch": "بنك القاهرة - فرع مدينة نصر",
  "Transaction_Number": "رقم العملية",
  "Important_Note": "ملاحظة هامة",
  "Transaction_Number_Required": "بعد إتمام التحويل، يرجى كتابة رقم العملية في الحقل أعلاه. سيتم التواصل معكم في أقرب وقت للتأكيد على الحجز.",
  "Back": "رجوع",
  "Order_Received_Successfully": "تم استلام طلبك بنجاح!",
  "Contact_Confirmation": "سيتم التواصل معكم في أقرب وقت لتأكيد الحجز. شكرًا لاستخدامكم خدماتنا.",
  "Back_to_Homepage": "العودة إلى الصفحة الرئيسية",
  "Bank_Account_Required": "حساب البنك مطلوب",
  "Transaction_Number_Required_Error": "رقم العملية مطلوب",
  "E_Wallet_Number": "رقم المحفظة",
  "Enter_Bank_Account_Number": "أدخل رقم الحساب البنكي",
  "Enter_E_Wallet_Number": "أدخل رقم المحفظة",
  "Enter_Transaction_Number": "أدخل رقم العملية بعد التحويل"
}


============================================================
FILE: locales/en.json
============================================================
{
  "welcome": "Welcome to our Tourism Site",
  "available_trips": "Available Trips",
  "honeymoon_offers": "Honeymoon Offers",
  "contact_us": "Contact Us",
  "email": "Email",
  "subject": "Subject",
  "message": "Message",
  "inquiry_type": "Inquiry Type",
  "payment_issue": "Payment Issue",
  "inquiries": "Inquiries",
  "customer_service": "Contact Customer Service",
  "send": "Send",
  "duration": "Duration",
  "price": "Price per person",
  "accommodation": "Accommodation",
  "show_details": "Show Details",
  "back_to_all_trips": "Back to All Trips",
  "book_your_trip": "Book Your Trip Now",
  "name": "Name",
  "phone": "Phone Number",
  "guests": "Number of Guests",
  "meeting_point": "Meeting Point",
  "confirm_booking": "Confirm Booking",
  "payment": "Payment",
  "amount_due": "Amount Due",
  "e_wallet": "E-Wallet",
  "bank_transfer": "Bank Transfer",
  "visa_mastercard": "Visa / Mastercard",
  "transaction_id": "Transaction ID",
  "card_number": "Card Number",
  "expiry_date": "Expiry Date",
  "cvc": "CVC",
  "confirm_payment": "Confirm Payment",
  "trips_we_made": "Trips We've Made",
  "people_traveled_with_us": "People Traveled With Us",
  "average_ratings": "Average Ratings",
  "dahab_trip": "Dahab Trip",
  "dahab_duration": "4 Days & 5 Nights",
  "dahab_price": "3000 EGP",
  "dahab_accommodation": "5-Star Hotel",
  "dahab_description": "Enjoy the beauty of nature in Dahab, with a diving trip in the most famous international sites.",
  "north_coast_trip": "North Coast Trip",
  "north_coast_duration": "3 Days & 4 Nights",
  "north_coast_price": "4000 EGP",
  "north_coast_accommodation": "Chalet on the sea",
  "north_coast_description": "Relax on the sandy beaches of the North Coast and enjoy the summer atmosphere.",
  "el_gouna_trip": "El Gouna Trip",
  "el_gouna_duration": "5 Days & 6 Nights",
  "el_gouna_price": "6000 EGP",
  "el_gouna_accommodation": "Tourist resort",
  "el_gouna_description": "A unique experience in El Gouna, where luxury and beauty.",
  "porto_sokhna_honeymoon": "Honeymoon Offer in Porto Sokhna",
  "porto_sokhna_duration": "3 Days & 4 Nights",
  "porto_sokhna_price": "5500 EGP",
  "porto_sokhna_accommodation": "Hotel suite with sea view",
  "porto_sokhna_description": "A special romantic offer for a honeymoon in Porto Sokhna.",
  "el_galala_honeymoon": "Honeymoon Offer in El Galala",
  "el_galala_duration": "4 Days & 5 Nights",
  "el_galala_price": "7000 EGP",
  "el_galala_accommodation": "5-star hotel with a panoramic view",
  "el_galala_description": "Enjoy a magical atmosphere in the city of El Galala.",
  "sharm_grand_plaza_honeymoon": "Honeymoon Offer in Sharm Grand Plaza",
  "sharm_grand_plaza_duration": "6 Days & 7 Nights",
  "sharm_grand_plaza_price": "8500 EGP",
  "sharm_grand_plaza_accommodation": "All-inclusive luxury resort",
  "sharm_grand_plaza_description": "An unforgettable honeymoon experience in the heart of Sharm El Sheikh.",
  "trip_not_found": "Trip not found",
  "Departure_time": "Departure time",
  "payment_method": "Payment Method",
  "credit_card": "Credit Card",
  "paypal": "PayPal",
  "Complete_reservation": "Complete the reservation",
  "Booking_Information": "Booking Information",
  "Full_Name": "Full Name",
  "Email_Address": "Email Address",
  "Phone_Number": "Phone Number",
  "Number_of_Guests": "Number of Guests",
  "Gathering_Place": "Gathering Place",
  "Trip_Details": "Trip Details",
  "Trip_Name": "Trip Name",
  "Total_Price": "Total Price",
  "currency": "EGP",
  "Next": "Next",
  "Choose_Payment_Method": "Choose Payment Method",
  "Bank_Transfer": "Bank Transfer",
  "E_Wallet": "E-Wallet",
  "Transfer_Details": "Bank Transfer Details",
  "E_Wallet_Details": "E-Wallet Payment Details",
  "Bank_Account_Info": "Bank Account Information",
  "Transfer_to_account": "Please transfer the amount to the following account:",
  "Account_Number": "Account Number",
  "Bank_Name_Branch": "Cairo Bank - Nasr City Branch",
  "Transaction_Number": "Transaction Number",
  "Important_Note": "Important Note",
  "Transaction_Number_Required": "After completing the transfer, please enter the transaction number in the field above. We will contact you as soon as possible to confirm the booking.",
  "Back": "Back",
  "Order_Received_Successfully": "Your order has been received successfully!",
  "Contact_Confirmation": "We will contact you as soon as possible to confirm the booking. Thank you for using our services.",
  "Back_to_Homepage": "Back to Homepage",
  "Bank_Account_Required": "Bank account is required",
  "Transaction_Number_Required_Error": "Transaction number is required",
  "E_Wallet_Number": "E-Wallet Number",
  "Enter_Bank_Account_Number": "Enter Bank Account Number",
  "Enter_E_Wallet_Number": "Enter E-Wallet Number",
  "Enter_Transaction_Number": "Enter Transaction Number after transfer"
}


============================================================
FILE: src/app/[locale]/payment/page.tsx
============================================================
import PaymentFlow from "@/features/payment/PaymentFlow";
import { getTranslations } from "@/lib/i18n";

export default async function Page({
  params,
}: {
  params: Promise<{ locale: string }>;
}) {
  console.log(params);
  const { locale } = await params;
  const t = getTranslations(locale as "ar" | "en");
  return (
    <div className=" min-h-screen">
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-4xl font-extrabold text-gray-900 mb-8 text-center">
          {t.Complete_reservation}
        </h1>
        <PaymentFlow t={t} />
      </div>
    </div>
  );
}


============================================================
FILE: src/app/[locale]/trips/[slug]/page.tsx
============================================================
import { getCategories, meetingPoints } from "@/lib/data/get-categories";
import { BackToTripsLink } from "@/components/BackToTripsLink";
import { findTripBySlug } from "@/lib/hooks/useTrip";
import TripDetailsContent from "@/features/trip-details/TripDetailsContent";
import BookingForm from "@/features/booking/BookingForm";
import { getLocale } from "next-intl/server";

const TripNotFound = () => (
  <div className="text-center py-12">Trip not found</div>
);

export default async function TripDetailsPage({
  params,
}: {
  params: Promise<{ slug: string }>;
}) {
  const { slug } = await params;
  const locale: "ar" | "en" = await getLocale();

  const categories = await getCategories();
  const trip = findTripBySlug(categories, slug);

  if (!trip) {
    return <TripNotFound />;
  }

  return (
    <main className="container mx-auto p-4 md:p-8">
      <BackToTripsLink locale={locale} />
      <div className="grid md:grid-cols-2 gap-8">
        <TripDetailsContent trip={trip} />
        <BookingForm
          meetingPoints={meetingPoints}
          trip={trip}
          locale={locale}
        />
      </div>
    </main>
  );
}


============================================================
FILE: src/app/[locale]/layout.tsx
============================================================
import type { Metadata } from "next";
import { IBM_Plex_Sans_Arabic, Nunito_Sans } from "next/font/google";
import "@/app/globals.css";
import ThemeToggle from "@/components/ThemeToggle";
import LanguageSwitcher from "@/components/LanguageSwitcher";
import { NextIntlClientProvider } from "next-intl";
import { getMessages } from "next-intl/server";
import { routing } from "@/i18n/routing";

const ibmPlexSansArabic = IBM_Plex_Sans_Arabic({
  subsets: ["arabic"],
  weight: ["400", "700"],
  variable: "--font-ibm-plex-sans-arabic",
});

const nunitoSans = Nunito_Sans({
  subsets: ["latin"],
  weight: ["400", "700"],
  variable: "--font-nunito-sans",
});

export const metadata: Metadata = {
  title: "Rahal",
  description: "A tourism website built with Next.js",
};

type Props = {
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
};

export default async function RootLayout({ children, params }: Props) {
  const { locale } = await params;

  const messages = await getMessages();

  const dir = locale === "ar" ? "rtl" : "ltr";
  const fontClassName =
    locale === "ar" ? ibmPlexSansArabic.className : nunitoSans.className;

  return (
    <html lang={locale} dir={dir}>
      <body className={fontClassName}>
        <NextIntlClientProvider messages={messages}>
          <div className="px-3 pt-2 md:px-0 md:pt-0 md:absolute md:top-4 md:end-4 z-50">
            <div className="flex justify-start items-center gap-1">
              <ThemeToggle />
              <LanguageSwitcher />
            </div>
          </div>
          {children}
        </NextIntlClientProvider>
      </body>
    </html>
  );
}

export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}


============================================================
FILE: src/app/[locale]/page.tsx
============================================================
import Header from "../../components/Header";
import TripSection from "@/components/TripSection";
import { getCategories } from "@/lib/data/get-categories";

export default async function Page({
  params,
}: {
  params: Promise<{ locale: string }>;
}) {
  const { locale } = await params;
  const categories = await getCategories();
  return (
    <main>
      <Header />
      <TripSection categories={categories} locale={locale as "ar" | "en"} />
    </main>
  );
}


============================================================
FILE: src/app/globals.css
============================================================
@import "tailwindcss";
@custom-variant dark (&:where([data-theme=dark], [data-theme=dark] *));

@theme {
  --color-primary: #ffeb3b;
  --color-secondary: #000080;
  --color-background: #ffffff;
  --color-foreground: #1f2937;
}

:where([data-theme="dark"]) {
  --color-primary: #ffd54f;
  --color-secondary: #000205;
  --color-background: #111827;
  --color-foreground: #f9fafb;
}

html,
body {
  @apply bg-background text-foreground transition-colors duration-300;
}


============================================================
FILE: src/components/form/FormLabel.tsx
============================================================
import React from "react";

interface FormLabelProps extends React.LabelHTMLAttributes<HTMLLabelElement> {
  required?: boolean;
}

/**
 * A standardized label component for form elements.
 * It supports an optional 'required' prop to display a red asterisk.
 * @param {FormLabelProps} props - The props for the component.
 */
const FormLabel = ({ children, required, ...props }: FormLabelProps) => {
  return (
    <label
      {...props}
      className="block text-sm font-medium text-gray-700 dark:text-gray-300"
    >
      {children}
      {required && <span className="text-red-500 ml-1">*</span>}
    </label>
  );
};

export default FormLabel;


============================================================
FILE: src/components/form/InputField.tsx
============================================================
import React, { forwardRef } from "react";
import FormLabel from "./FormLabel";

interface InputFieldProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label: string;
  error?: string;
}

/**
 * A reusable input field component with a label and error message handling.
 * It supports all standard input attributes.
 * @param {InputFieldProps} props - The props for the component.
 */
const InputField = forwardRef<HTMLInputElement, InputFieldProps>(
  ({ label, id, required, error, name, ...props }, ref) => {
    const inputId = id || label.toLowerCase().replace(/\s/g, "-");
    const errorId = `${inputId}-error`;

    return (
      <div className="mb-4">
        <FormLabel htmlFor={inputId} required={required}>
          {label}
        </FormLabel>
        <input
          id={inputId}
          required={required}
          aria-describedby={error ? errorId : undefined}
          aria-invalid={!!error}
          ref={ref}
          name={name}
          {...props}
          className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
        />
        {error && (
          <p
            id={errorId}
            className="mt-2 text-sm text-red-600"
            aria-live="assertive"
          >
            {error}
          </p>
        )}
      </div>
    );
  }
);

InputField.displayName = "InputField";

export default InputField;


============================================================
FILE: src/components/form/SelectField.tsx
============================================================
import React, { forwardRef } from "react";
import FormLabel from "./FormLabel";

interface SelectFieldProps
  extends React.SelectHTMLAttributes<HTMLSelectElement> {
  label: string;
  options: { value: string; label: string }[];
  error?: string;
}

/**
 * A reusable select field component with a label, options, and error handling.
 * @param {SelectFieldProps} props - The props for the component.
 */
const SelectField = forwardRef<HTMLSelectElement, SelectFieldProps>(
  ({ label, id, options, required, error, name, ...props }, ref) => {
    const selectId = id || label.toLowerCase().replace(/\s/g, "-");
    const errorId = `${selectId}-error`;

    return (
      <div className="mb-6">
        <FormLabel htmlFor={selectId} required={required}>
          {label}
        </FormLabel>
        <select
          id={selectId}
          required={required}
          aria-describedby={error ? errorId : undefined}
          aria-invalid={!!error}
          ref={ref}
          name={name}
          {...props}
          className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-gray-900 dark:text-white"
        >
          {options.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
        {error && (
          <p
            id={errorId}
            className="mt-2 text-sm text-red-600"
            aria-live="assertive"
          >
            {error}
          </p>
        )}
      </div>
    );
  }
);

SelectField.displayName = "SelectField";

export default SelectField;


============================================================
FILE: src/components/form/TextareaField.tsx
============================================================
import React from "react";
import FormLabel from "./FormLabel";

interface TextareaFieldProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
  label: string;
  error?: string;
}

/**
 * A reusable textarea field component with a label and error message handling.
 * @param {TextareaFieldProps} props - The props for the component.
 */
const TextareaField = ({
  label,
  id,
  required,
  error,
  ...props
}: TextareaFieldProps) => {
  const textareaId = id || label.toLowerCase().replace(/\s/g, "-");
  const errorId = `${textareaId}-error`;

  return (
    <div className="mb-4">
      <FormLabel htmlFor={textareaId} required={required}>
        {label}
      </FormLabel>
      <textarea
        id={textareaId}
        required={required}
        aria-describedby={error ? errorId : undefined}
        aria-invalid={!!error}
        {...props}
        className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
      />
      {error && (
        <p
          id={errorId}
          className="mt-2 text-sm text-red-600"
          aria-live="assertive"
        >
          {error}
        </p>
      )}
    </div>
  );
};

export default TextareaField;


============================================================
FILE: src/components/ui/Button.tsx
============================================================
"use client";
import React from "react";
import { cva, type VariantProps } from "class-variance-authority";

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none cursor-pointer",
  {
    variants: {
      variant: {
        primary: "bg-primary text-secondary hover:bg-primary/90",
        secondary: "bg-secondary text-white hover:bg-secondary/90",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
        ghost: "hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        sm: "h-9 rounded-md px-3",
        md: "h-10 px-4 py-2",
        lg: "h-11 rounded-md px-8",
      },
    },
    defaultVariants: {
      variant: "primary",
      size: "md",
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  fullWidth?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, fullWidth, ...props }, ref) => {
    return (
      <button
        className={`${buttonVariants({ variant, size, className })} ${
          fullWidth ? "w-full" : ""
        }`}
        ref={ref}
        {...props}
      />
    );
  }
);

Button.displayName = "Button";

export { Button, buttonVariants };


============================================================
FILE: src/components/BackToTripsLink.tsx
============================================================
import Link from "next/link";
import { useTranslations } from "next-intl";
import { useLocale } from "next-intl";

interface BackToTripsLinkProps {
  locale: string;
}

export function BackToTripsLink({ locale }: BackToTripsLinkProps) {
  const t = useTranslations();
  const currentLocale = useLocale();
  const arrow = currentLocale === "ar" ? "→" : "←";

  return (
    <div className="mb-8">
      <Link
        href={`/${locale}`}
        className="inline-flex items-center bg-primary text-secondary rounded-lg px-3 py-2 hover:bg-opacity-90 transition-colors"
      >
        <span className="mr-2">{arrow}</span>
        {t("back_to_all_trips")}
      </Link>
    </div>
  );
}


============================================================
FILE: src/components/CategorySection.tsx
============================================================
import { Category } from "@/types/category";
import TripCard from "./TripCard";

interface CategorySectionProps {
  category: Category;
  locale: "ar" | "en";
}

export default function CategorySection({
  category,
  locale,
}: CategorySectionProps) {
  const categoryName = locale === "ar" ? category.nameAr : category.nameEn;

  return (
    <section className="w-full mb-16 px-4">
      <h2 className="text-3xl font-bold text-center mb-8">{categoryName}</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {category.trips.map((trip) => (
          <TripCard key={trip.id} trip={trip} locale={locale} />
        ))}
      </div>
    </section>
  );
}


============================================================
FILE: src/components/Header.tsx
============================================================
import { getTranslations } from "next-intl/server";

export default async function Header() {
  const t = await getTranslations();

  return (
    <div className="flex flex-col justify-center items-center mt-3">
      <h1 className="text-2xl md:text-4xl font-bold text-primary mb-12">
        {t("welcome")}
      </h1>
    </div>
  );
}


============================================================
FILE: src/components/LanguageSwitcher.tsx
============================================================
"use client";
import { useLocale } from "next-intl";
import { usePathname, Link } from "@/i18n/navigation";

export default function LanguageSwitcher() {
  const locale = useLocale();
  const pathname = usePathname(); // هذا الآن من next-intl/navigation

  return (
    <div className="">
      <Link
        href={pathname}
        locale="ar"
        className={`px-3 py-1 rounded-md mx-2 cursor-pointer ${
          locale === "ar"
            ? "bg-primary text-secondary font-bold"
            : "bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white"
        }`}
      >
        عربي
      </Link>
      <Link
        href={pathname}
        locale="en"
        className={`px-3 py-1 rounded-md cursor-pointer ${
          locale === "en"
            ? "bg-primary text-secondary font-bold"
            : "bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white"
        }`}
      >
        English
      </Link>
    </div>
  );
}


============================================================
FILE: src/components/ThemeToggle.tsx
============================================================
"use client";
import { useEffect, useState } from "react";

const SunIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="20"
    height="20"
    fill="currentColor"
    viewBox="0 0 16 16"
  >
    <path d="M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z" />
  </svg>
);

const MoonIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="20"
    height="20"
    fill="currentColor"
    viewBox="0 0 16 16"
  >
    <path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278zM4.858 1.311A7.269 7.269 0 0 0 1.025 7.71c0 4.02 3.279 7.276 7.319 7.276a7.316 7.316 0 0 0 5.205-2.162c-.337.042-.68.063-1.029.063-4.61 0-8.343-3.714-8.343-8.29 0-1.167.242-2.278.681-3.286z" />
  </svg>
);

export default function ThemeToggle() {
  const [isDark, setIsDark] = useState(false);
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
    const savedTheme = localStorage.getItem("theme");
    const prefersDark = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;
    const initialTheme = savedTheme === "dark" || (!savedTheme && prefersDark);
    setIsDark(initialTheme);
    document.documentElement.setAttribute(
      "data-theme",
      initialTheme ? "dark" : "light"
    );
  }, []);

  const toggleTheme = () => {
    const newTheme = !isDark;
    setIsDark(newTheme);
    document.documentElement.setAttribute(
      "data-theme",
      newTheme ? "dark" : "light"
    );
    localStorage.setItem("theme", newTheme ? "dark" : "light");
  };

  if (!isMounted) {
    return (
      <button
        className="p-2 rounded-full bg-gray-200 text-gray-800"
        aria-label="Toggle theme"
      >
        <div className="w-5 h-5"></div>
      </button>
    );
  }

  return (
    <div className="">
      <button
        onClick={toggleTheme}
        className="p-2 rounded-full bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white transition-colors duration-200 hover:bg-gray-300 dark:hover:bg-gray-600 focus:outline-none   focus:ring-offset-2 dark:focus:ring-offset-gray-800"
        aria-label={`Switch to ${isDark ? "light" : "dark"} mode`}
      >
        {isDark ? <SunIcon /> : <MoonIcon />}
      </button>
    </div>
  );
}


============================================================
FILE: src/components/TripCard.tsx
============================================================
import Image from "next/image";
import Link from "next/link";
import { Category } from "@/types/category";
import { Button } from "./ui/Button";
import { useTranslations } from "next-intl";

interface TripCardProps {
  trip: Category["trips"][number];
  locale: "ar" | "en";
}

export default function TripCard({ trip, locale }: TripCardProps) {
  const t = useTranslations();

  const name = locale === "ar" ? trip.nameAr : trip.nameEn;
  const duration = locale === "ar" ? trip.durationAr : trip.durationEn;
  const accommodation =
    locale === "ar" ? trip.accommodationAr : trip.accommodationEn;
  const description = locale === "ar" ? trip.descriptionAr : trip.descriptionEn;

  return (
    <div className="rounded-lg shadow-lg overflow-hidden bg-white dark:bg-gray-800">
      <div className="relative h-56">
        <Image
          src={trip.imageUrl}
          alt={name}
          fill
          sizes="(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw"
          className="object-cover"
          loading="lazy"
        />
      </div>
      <div className="p-4">
        <h3 className="text-xl font-bold text-gray-900 dark:text-white">
          {name}
        </h3>
        <p className="text-gray-600 dark:text-gray-400">{duration}</p>
        <p className="text-gray-600 dark:text-gray-400">
          {trip.price.amount} {trip.price.currency}
        </p>
        <p className="text-gray-600 dark:text-gray-400">{accommodation}</p>
        <p className="text-gray-600 dark:text-gray-400">{description}</p>
        <Link href={`/${locale}/trips/${trip.id}`}>
          <Button variant="primary" size="md" fullWidth>
            {t("show_details")}
          </Button>
        </Link>
      </div>
    </div>
  );
}


============================================================
FILE: src/components/TripSection.tsx
============================================================
import { Category } from "@/types/category";
import CategorySection from "./CategorySection";

interface TripSectionProps {
  categories: Category[];
  locale: "ar" | "en";
}

export default function TripSection({ categories, locale }: TripSectionProps) {
  return (
    <div>
      {categories.map((category) => (
        <CategorySection
          key={category.id}
          category={category}
          locale={locale}
        />
      ))}
    </div>
  );
}


============================================================
FILE: src/features/booking/BookingForm.tsx
============================================================
"use client";

import PersonalDetailsForm from "./PersonalDetailsForm";
import TripDetailsForm from "./TripDetailsForm";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { BookingFormData, bookingSchema } from "./schemas/booking-schema";
import { useBookingStore } from "./store/booking-store";
import Trip from "@/types/trip";
import { Button } from "@/components/ui/Button";
import { useRouter } from "@/i18n/navigation"; // ← من next-intl
import { useTranslations } from "next-intl"; // ← مهم جدًا

interface BookingFormProps {
  meetingPoints: string[];
  trip: Trip;
  locale: "ar" | "en"; 

export default function BookingForm({
  meetingPoints,
  trip,
  locale,
}: BookingFormProps) {
  const t = useTranslations(); // ← لا حاجة لتمرير t كـ prop
  const router = useRouter();
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<BookingFormData>({
    resolver: zodResolver(bookingSchema),
  });
  const { setBookingData, setTrip } = useBookingStore();

  const onSubmit = (data: BookingFormData) => {
    setBookingData(data);
    setTrip({
      title: locale === "ar" ? trip.nameAr : trip.nameEn,
      price: trip.price.amount,
    });
    router.push("/payment"); // ← next-intl يحافظ على اللغة تلقائيًا
  };

  return (
    <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
      <h2 className="text-2xl font-bold mb-6 text-gray-900 dark:text-white">
        {t("book_your_trip")} {/* ✅ الآن t دالة */}
      </h2>
      <form onSubmit={handleSubmit(onSubmit)}>
        <PersonalDetailsForm register={register} errors={errors} />
        <TripDetailsForm
          meetingPoints={meetingPoints}
          register={register}
          errors={errors}
        />
        <Button type="submit" variant="primary" size="lg" fullWidth>
          {t("confirm_booking")} {/* ✅ صحيح الآن */}
        </Button>
      </form>
    </div>
  );
}


============================================================
FILE: src/features/booking/PersonalDetailsForm.tsx
============================================================
import React from "react";
import InputField from "../../components/form/InputField";
import { UseFormRegister, FieldErrors } from "react-hook-form";
import { BookingFormData } from "./schemas/booking-schema";

import { Translations } from "@/types/i18n";

// ... existing code ...

interface PersonalDetailsFormProps {
  t: Translations;
  register: UseFormRegister<BookingFormData>;
  errors: FieldErrors<BookingFormData>;
}

/**
 * A form component for collecting personal details like name, email, and phone.
 * @param {PersonalDetailsFormProps} props - The props for the component.
 */

const PersonalDetailsForm = ({
  t,
  register,
  errors,
}: PersonalDetailsFormProps) => {
  return (
    <>
      <InputField
        label={t("name")}
        id="name"
        type="text"
        {...register("name")}
        error={errors.name?.message}
      />
      <InputField
        label={t("email")}
        id="email"
        type="email"
        {...register("email")}
        error={errors.email?.message}
      />
      <InputField
        label={t("phone")}
        id="phone"
        type="tel"
        {...register("phoneNumber")}
        error={errors.phoneNumber?.message}
      />
    </>
  );
};

export default PersonalDetailsForm;


============================================================
FILE: src/features/booking/TripDetailsForm.tsx
============================================================
import React from "react";
import InputField from "../../components/form/InputField";
import SelectField from "../../components/form/SelectField";
import { UseFormRegister, FieldErrors } from "react-hook-form";
import { BookingFormData } from "./schemas/booking-schema";
import { Translations } from "@/types/i18n";

interface TripDetailsFormProps {
  t: Translations;
  meetingPoints: string[];
  register: UseFormRegister<BookingFormData>;
  errors: FieldErrors<BookingFormData>;
}

/**
 * A form component for trip-specific details like number of guests and meeting point.
 * @param {TripDetailsFormProps} props - The props for the component.
 */
const TripDetailsForm = ({
  t,
  meetingPoints,
  register,
  errors,
}: TripDetailsFormProps) => {
  const meetingPointOptions = meetingPoints.map((point) => ({
    value: point,
    label: point,
  }));

  return (
    <>
      <InputField
        label={t("guests")}
        id="guests"
        type="number"
        min="1"
        {...register("guests", { valueAsNumber: true })}
        error={errors.guests?.message}
      />
      <SelectField
        label={t("meeting_point")}
        id="meeting-point"
        options={meetingPointOptions}
        {...register("gatheringPlace")}
        error={errors.gatheringPlace?.message}
      />
    </>
  );
};

export default TripDetailsForm;


============================================================
FILE: src/features/payment/BookingSummary.tsx
============================================================
import React from "react";
import { BookingSummaryData } from "./types";
import { useBookingStore } from "@/features/booking/store/booking-store";
import { Button } from "@/components/ui/Button";
import { Translations } from "@/lib/i18n";

interface BookingSummaryProps {
  onNext: () => void;
  t: Translations;
}

const BookingSummary: React.FC<BookingSummaryProps> = ({ onNext, t }) => {
  const { name, email, phoneNumber, guests, gatheringPlace, trip } =
    useBookingStore();
  console.log(trip);

  const bookingData: BookingSummaryData = {
    name,
    email,
    phoneNumber,
    guests,
    gatheringPlace,
    trip,
  };

  const isFormValid =
    bookingData.name &&
    bookingData.email &&
    bookingData.phoneNumber &&
    bookingData.guests > 0 &&
    bookingData.trip.title &&
    bookingData.trip.price > 0;

  return (
    <div className="space-y-6">
      <div className="rounded-lg shadow-md p-6 bg-white dark:bg-gray-800">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">
          {t.Booking_Information}
        </h2>

        <div className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                {t.Full_Name}
              </label>
              <p className="text-gray-900 dark:text-white bg-gray-50 dark:bg-gray-700 px-3 py-2 rounded-md">
                {bookingData.name}
              </p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                {t.Email_Address}
              </label>
              <p className="text-gray-900 dark:text-white bg-gray-50 dark:bg-gray-700 px-3 py-2 rounded-md">
                {bookingData.email}
              </p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                {t.Phone_Number}
              </label>
              <p className="text-gray-900 dark:text-white bg-gray-50 dark:bg-gray-700 px-3 py-2 rounded-md">
                {bookingData.phoneNumber}
              </p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                {t.Number_of_Guests}
              </label>
              <p className="text-gray-900 dark:text-white bg-gray-50 dark:bg-gray-700 px-3 py-2 rounded-md">
                {bookingData.guests}
              </p>
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                {t.Gathering_Place}
              </label>
              <p className="text-gray-900 dark:text-white bg-gray-50 dark:bg-gray-700 px-3 py-2 rounded-md">
                {bookingData.gatheringPlace}
              </p>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">
          {t.Trip_Details}
        </h2>

        <div className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                {t.Trip_Name}
              </label>
              <p className="text-gray-900 dark:text-white bg-gray-50 dark:bg-gray-700 px-3 py-2 rounded-md">
                {bookingData.trip.title}
              </p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                {t.Total_Price}
              </label>
              <p className="text-gray-900 dark:text-white bg-gray-50 dark:bg-gray-700 px-3 py-2 rounded-md">
                {bookingData.trip.price} {t.currency}
              </p>
            </div>
          </div>
        </div>
      </div>

      <div className="flex justify-end">
        <Button
          onClick={onNext}
          disabled={!isFormValid}
          variant="primary"
          size="lg"
        >
          {t.Next}
        </Button>
      </div>
    </div>
  );
};

export default BookingSummary;


============================================================
FILE: src/features/payment/ConfirmationSuccess.tsx
============================================================
import React from "react";
import Link from "next/link";
import { Translations } from "@/lib/i18n";
import { Button } from "@/components/ui/Button";

interface ConfirmationSuccessProps {
  t: Translations;
}

const ConfirmationSuccess = ({ t }: ConfirmationSuccessProps) => {
  return (
    <div className="flex flex-col items-center justify-center text-center p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
      <div className="w-24 h-24 flex items-center justify-center bg-green-100 dark:bg-green-900/50 rounded-full mb-6">
        <svg
          className="w-16 h-16 text-green-500 dark:text-green-400"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M5 13l4 4L19 7"
          ></path>
        </svg>
      </div>
      <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
        {t.Order_Received_Successfully}
      </h2>
      <p className="text-gray-600 dark:text-gray-400 text-lg mb-8">
        {t.Contact_Confirmation}
      </p>
      <Link href="/ar">
        <Button variant="primary" size="lg">
          {t.Back_to_Homepage}
        </Button>
      </Link>
    </div>
  );
};

export default ConfirmationSuccess;


============================================================
FILE: src/features/payment/PaymentDetails.tsx
============================================================
import React, { useState } from "react";
import { useBookingStore } from "@/features/booking/store/booking-store";
import InputField from "@/components/form/InputField";
import { Translations } from "@/lib/i18n";
import { Button } from "@/components/ui/Button";

interface PaymentDetailsProps {
  onNext: () => void;
  onBack: () => void;
  t: Translations;
}

const PaymentDetails: React.FC<PaymentDetailsProps> = ({
  onNext,
  onBack,
  t,
}) => {
  const { payment, setBankAccount, setTransactionNumber } = useBookingStore();
  const [errors, setErrors] = useState<{
    bankAccount?: string;
    transactionNumber?: string;
  }>({});

  const validateForm = () => {
    const newErrors: { bankAccount?: string; transactionNumber?: string } = {};

    if (!payment.bankAccount?.trim()) {
      newErrors.bankAccount = t.Bank_Account_Required;
    }

    if (!payment.transactionNumber?.trim()) {
      newErrors.transactionNumber = t.Transaction_Number_Required;
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleBankAccountChange = (value: string) => {
    setBankAccount(value);
    if (errors.bankAccount && value.trim()) {
      setErrors((prev) => ({ ...prev, bankAccount: undefined }));
    }
  };

  const handleTransactionNumberChange = (value: string) => {
    setTransactionNumber(value);
    if (errors.transactionNumber && value.trim()) {
      setErrors((prev) => ({ ...prev, transactionNumber: undefined }));
    }
  };

  const handleSubmit = () => {
    if (validateForm()) {
      onNext();
    }
  };

  const getBankAccountNumber = () => {
    // This would typically come from your backend or configuration
    return "010012345678901";
  };

  return (
    <div className="space-y-6">
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">
          {payment.method === "bank_transfer"
            ? t.Transfer_Details
            : t.E_Wallet_Details}
        </h2>

        <div className="space-y-6">
          {payment.method === "bank_transfer" && (
            <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg p-4">
              <div className="flex items-start space-x-3">
                <div className="text-blue-600 dark:text-blue-400 text-xl">
                  🏦
                </div>
                <div>
                  <h3 className="font-semibold text-blue-900 dark:text-blue-200">
                    {t.Bank_Account_Info}
                  </h3>
                  <p className="text-blue-700 dark:text-blue-300 mt-1">
                    {t.Transfer_to_account}
                  </p>
                  <div className="bg-white dark:bg-gray-900 rounded p-3 mt-2 font-mono text-sm">
                    <p className="dark:text-white">
                      {t.Account_Number}: {getBankAccountNumber()}
                    </p>
                    <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                      {t.Bank_Name_Branch}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}

          <div className="space-y-4">
            <InputField
              label={
                payment.method === "bank_transfer"
                  ? t.Account_Number
                  : t.E_Wallet_Number
              }
              type="text"
              value={payment.bankAccount || ""}
              onChange={(e) => handleBankAccountChange(e.target.value)}
              error={errors.bankAccount}
              placeholder={
                payment.method === "bank_transfer"
                  ? t.Enter_Bank_Account_Number
                  : t.Enter_E_Wallet_Number
              }
              required
            />

            <InputField
              label={t.Transaction_Number}
              type="text"
              value={payment.transactionNumber || ""}
              onChange={(e) => handleTransactionNumberChange(e.target.value)}
              error={errors.transactionNumber}
              placeholder={t.Enter_Transaction_Number}
              required
            />
          </div>

          <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-700 rounded-lg p-4">
            <div className="flex items-start space-x-3">
              <div className="text-yellow-600 dark:text-yellow-400 text-xl">
                ⚠️
              </div>
              <div>
                <h3 className="font-semibold text-yellow-900 dark:text-yellow-200">
                  {t.Important_Note}
                </h3>
                <p className="text-yellow-700 dark:text-yellow-300 mt-1">
                  {t.Transaction_Number_Required}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="flex justify-between">
        <Button onClick={onBack} variant="outline" size="lg">
          {t.Back}
        </Button>
        <Button onClick={handleSubmit} variant="primary" size="lg">
          {t.Next}
        </Button>
      </div>
    </div>
  );
};

export default PaymentDetails;


============================================================
FILE: src/features/payment/PaymentFlow.tsx
============================================================
"use client";
import React, { useState } from "react";
import BookingSummary from "./BookingSummary";
import PaymentMethodSelection from "./PaymentMethodSelection";
import PaymentDetails from "./PaymentDetails";
import ConfirmationSuccess from "./ConfirmationSuccess";
import { PaymentStep } from "./types";

import { Translations } from "@/lib/i18n";

interface PaymentFlowProps {
  t: Translations;
}

const PaymentFlow: React.FC<PaymentFlowProps> = ({ t }) => {
  const [currentStep, setCurrentStep] = useState<PaymentStep>("summary");

  const handleNext = () => {
    switch (currentStep) {
      case "summary":
        setCurrentStep("payment_method");
        break;
      case "payment_method":
        setCurrentStep("payment_details");
        break;
      case "payment_details":
        setCurrentStep("confirmation");
        break;
      default:
        break;
    }
  };

  const handleBack = () => {
    switch (currentStep) {
      case "payment_method":
        setCurrentStep("summary");
        break;
      case "payment_details":
        setCurrentStep("payment_method");
        break;
      default:
        break;
    }
  };

  const renderStep = () => {
    switch (currentStep) {
      case "summary":
        return <BookingSummary onNext={handleNext} t={t} />;
      case "payment_method":
        return (
          <PaymentMethodSelection
            onNext={handleNext}
            onBack={handleBack}
            t={t}
          />
        );
      case "payment_details":
        return <PaymentDetails onNext={handleNext} onBack={handleBack} t={t} />;
      case "confirmation":
        return <ConfirmationSuccess t={t} />;
      default:
        return null;
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-3xl mx-auto">{renderStep()}</div>
    </div>
  );
};

export default PaymentFlow;


============================================================
FILE: src/features/payment/PaymentMethodSelection.tsx
============================================================
import React from "react";
import { useBookingStore } from "@/features/booking/store/booking-store";
import { Translations } from "@/lib/i18n";
import { Button } from "@/components/ui/Button";

interface PaymentMethodSelectionProps {
  onNext: () => void;
  onBack: () => void;
  t: Translations;
}

const PaymentMethodSelection: React.FC<PaymentMethodSelectionProps> = ({
  onNext,
  onBack,
  t,
}) => {
  const { payment, setPaymentMethod } = useBookingStore();

  const paymentMethods = [
    {
      id: "bank_transfer",
      name: t.Bank_Transfer,
      description: t.Transfer_Details,
      icon: "🏦",
    },
    {
      id: "ewallet",
      name: t.E_Wallet,
      description: t.E_Wallet_Details,
      icon: "💳",
    },
  ];

  const handleMethodSelect = (methodId: "bank_transfer" | "ewallet") => {
    setPaymentMethod(methodId);
  };

  const isMethodSelected = payment.method !== null;

  return (
    <div className="space-y-6">
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">
          {t.Choose_Payment_Method}
        </h2>

        <div className="space-y-4">
          {paymentMethods.map((method) => (
            <div
              key={method.id}
              onClick={() =>
                handleMethodSelect(method.id as "bank_transfer" | "ewallet")
              }
              className={`border-2 rounded-lg p-4 cursor-pointer transition-all duration-200 ${
                payment.method === method.id
                  ? "border-indigo-500 bg-indigo-50 dark:bg-indigo-900/50"
                  : "border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600"
              }`}
            >
              <div className="flex items-center space-x-4">
                <div className="text-3xl">{method.icon}</div>
                <div className="flex-1">
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                    {method.name}
                  </h3>
                  <p className="text-gray-600 dark:text-gray-400">
                    {method.description}
                  </p>
                </div>
                <div className="flex-shrink-0">
                  <div
                    className={`w-5 h-5 rounded-full border-2 ${
                      payment.method === method.id
                        ? "border-indigo-500 bg-indigo-500"
                        : "border-gray-300 dark:border-gray-600"
                    }`}
                  >
                    {payment.method === method.id && (
                      <div className="w-3 h-3 bg-white rounded-full m-1"></div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="flex justify-between">
        <Button onClick={onBack} variant="outline" size="lg">
          {t.Back}
        </Button>
        <Button
          onClick={onNext}
          disabled={!isMethodSelected}
          variant="primary"
          size="lg"
        >
          {t.Next}
        </Button>
      </div>
    </div>
  );
};

export default PaymentMethodSelection;


============================================================
FILE: src/features/trip-details/TripDetailsContent.tsx
============================================================
"use client";

import Trip from "@/types/trip";
import { useTranslations, useLocale } from "next-intl";
import Image from "next/image";

interface TripDetailsContentProps {
  trip: Trip;
}

const TripImage = ({ imageUrl, alt }: { imageUrl: string; alt: string }) => (
  <div className="relative h-96 rounded-lg overflow-hidden shadow-lg">
    <Image
      src={imageUrl}
      alt={alt}
      fill
      className="object-cover"
      sizes="(max-width: 768px) 80vw, (max-width: 1024px) 50vw, 33vw"
    />
  </div>
);

const DetailItem = ({
  label,
  value,
}: {
  label: string;
  value: React.ReactNode;
}) => (
  <p>
    <span className="font-bold text-gray-900 dark:text-white">{label}:</span>{" "}
    {value}
  </p>
);

export default function TripDetailsContent({ trip }: TripDetailsContentProps) {
  const t = useTranslations();
  const locale = useLocale();

  const name = locale === "ar" ? trip.nameAr : trip.nameEn;
  const description = locale === "ar" ? trip.descriptionAr : trip.descriptionEn;
  const duration = locale === "ar" ? trip.durationAr : trip.durationEn;
  const accommodation =
    locale === "ar" ? trip.accommodationAr : trip.accommodationEn;
  const price = `${trip.price.amount} ${trip.price.currency}`;

  return (
    <div>
      <TripImage imageUrl={trip.imageUrl} alt={name} />
      <div className="mt-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
          {name}
        </h1>
        <p className="text-gray-600 dark:text-gray-400 mt-2">{description}</p>

        <div className="mt-4 grid grid-cols-2 gap-4">
          <DetailItem label={t("duration")} value={duration} />
          <DetailItem label={t("price")} value={price} />
          <DetailItem label={t("accommodation")} value={accommodation} />
          <DetailItem label={t("Departure_time")} value={trip.departureDate} />
        </div>
      </div>
    </div>
  );
}


============================================================
FILE: src/messages/ar.json
============================================================
{
  "welcome": "مرحبا بك في موقعنا السياحي",
  "available_trips": "الرحلات المتاحه الان",
  "honeymoon_offers": "عروض شهر العسل",
  "contact_us": "تواصل معنا",
  "email": "البريد الإلكتروني",
  "subject": "عنوان الموضوع",
  "message": "الموضوع",
  "inquiry_type": "نوع الموضوع",
  "payment_issue": "مشكلة في الدفع",
  "inquiries": "استفسارات",
  "customer_service": "تواصل مع خدمة العملاء",
  "send": "إرسال",
  "duration": "المدة",
  "price": "سعر الفرد",
  "accommodation": "مكان الاقامة",
  "show_details": "اعرض التفاصيل",
  "back_to_all_trips": "العودة إلى كل الرحلات",
  "book_your_trip": "احجز رحلتك الآن",
  "name": "الاسم",
  "phone": "رقم الهاتف",
  "guests": "عدد الأفراد",
  "meeting_point": "مكان التجمع",
  "confirm_booking": "تأكيد الحجز",
  "payment": "الدفع",
  "amount_due": "المبلغ المطلوب",
  "e_wallet": "محفظة إلكترونية",
  "bank_transfer": "تحويل بنكي",
  "visa_mastercard": "فيزا/ماستركارد",
  "transaction_id": "رقم العملية",
  "card_number": "رقم البطاقة",
  "expiry_date": "تاريخ الانتهاء",
  "cvc": "CVC",
  "confirm_payment": "تأكيد الدفع",
  "trips_we_made": "الرحلات التي قمنا بها",
  "people_traveled_with_us": "الأشخاص الذين سافروا معنا",
  "average_ratings": "متوسط التقييمات",
  "dahab_trip": "رحلة دهب",
  "dahab_duration": "4 ايام و 5 ليال",
  "dahab_price": "3000 جنيه",
  "dahab_accommodation": "فندق 5 نجوم",
  "dahab_description": "استمتع بجمال الطبيعة في دهب، مع رحلة غوص في أشهر المواقع العالمية.",
  "north_coast_trip": "رحلة الساحل الشمالي",
  "north_coast_duration": "3 ايام و 4 ليال",
  "north_coast_price": "4000 جنيه",
  "north_coast_accommodation": "شاليه على البحر",
  "north_coast_description": "استرخِ على شواطئ الساحل الشمالي الرملية واستمتع بأجواء الصيف.",
  "el_gouna_trip": "رحلة الجونة",
  "el_gouna_duration": "5 ايام و 6 ليال",
  "el_gouna_price": "6000 جنيه",
  "el_gouna_accommodation": "منتجع سياحي",
  "el_gouna_description": "تجربة فريدة في الجونة، حيث الفخامة والجمال.",
  "porto_sokhna_honeymoon": "عرض شهر العسل في بورتو السخنة",
  "porto_sokhna_duration": "3 ايام و 4 ليال",
  "porto_sokhna_price": "5500 جنيه",
  "porto_sokhna_accommodation": "جناح فندقي مطل على البحر",
  "porto_sokhna_description": "عرض رومانسي خاص لشهر العسل في بورتو السخنة.",
  "el_galala_honeymoon": "عرض شهر العسل في الجلالة",
  "el_galala_duration": "4 ايام و 5 ليال",
  "el_galala_price": "7000 جنيه",
  "el_galala_accommodation": "فندق 5 نجوم مع إطلالة بانورامية",
  "el_galala_description": "استمتعوا بأجواء ساحرة في مدينة الجلالة.",
  "sharm_grand_plaza_honeymoon": "عرض شهر العسل في شرم جراند بلازا",
  "sharm_grand_plaza_duration": "6 ايام و 7 ليال",
  "sharm_grand_plaza_price": "8500 جنيه",
  "sharm_grand_plaza_accommodation": "منتجع فاخر شامل كليًا",
  "sharm_grand_plaza_description": "تجربة لا تُنسى لشهر العسل في قلب شرم الشيخ.",
  "trip_not_found": "لم يتم العثور على رحلة",
  "Departure_time": "موعد المغادرة",
  "payment_method": "طريقة الدفع",
  "credit_card": "بطاقة ائتمان",
  "paypal": "باي بال",
  "Complete_reservation": "إتمام الحجز",
  "Booking_Information": "معلومات الحجز",
  "Full_Name": "الاسم الكامل",
  "Email_Address": "البريد الإلكتروني",
  "Phone_Number": "رقم الهاتف",
  "Number_of_Guests": "عدد الضيوف",
  "Gathering_Place": "مكان التجمع",
  "Trip_Details": "تفاصيل الرحلة",
  "Trip_Name": "اسم الرحلة",
  "Total_Price": "السعر الإجمالي",
  "currency": "جنيه",
  "Next": "التالي",
  "Choose_Payment_Method": "اختر طريقة الدفع",
  "Bank_Transfer": "تحويل بنكي",
  "E_Wallet": "محفظة إلكترونية",
  "Transfer_Details": "تفاصيل التحويل البنكي",
  "E_Wallet_Details": "تفاصيل الدفع عبر المحفظة",
  "Bank_Account_Info": "معلومات الحساب البنكي",
  "Transfer_to_account": "يرجى تحويل المبلغ إلى الحساب التالي:",
  "Account_Number": "رقم الحساب",
  "Bank_Name_Branch": "بنك القاهرة - فرع مدينة نصر",
  "Transaction_Number": "رقم العملية",
  "Important_Note": "ملاحظة هامة",
  "Transaction_Number_Required": "بعد إتمام التحويل، يرجى كتابة رقم العملية في الحقل أعلاه. سيتم التواصل معكم في أقرب وقت للتأكيد على الحجز.",
  "Back": "رجوع",
  "Order_Received_Successfully": "تم استلام طلبك بنجاح!",
  "Contact_Confirmation": "سيتم التواصل معكم في أقرب وقت لتأكيد الحجز. شكرًا لاستخدامكم خدماتنا.",
  "Back_to_Homepage": "العودة إلى الصفحة الرئيسية",
  "Bank_Account_Required": "حساب البنك مطلوب",
  "Transaction_Number_Required_Error": "رقم العملية مطلوب",
  "E_Wallet_Number": "رقم المحفظة",
  "Enter_Bank_Account_Number": "أدخل رقم الحساب البنكي",
  "Enter_E_Wallet_Number": "أدخل رقم المحفظة",
  "Enter_Transaction_Number": "أدخل رقم العملية بعد التحويل"
}


============================================================
FILE: src/messages/en.json
============================================================
{
  "welcome": "Welcome to our Tourism Site",
  "available_trips": "Available Trips",
  "honeymoon_offers": "Honeymoon Offers",
  "contact_us": "Contact Us",
  "email": "Email",
  "subject": "Subject",
  "message": "Message",
  "inquiry_type": "Inquiry Type",
  "payment_issue": "Payment Issue",
  "inquiries": "Inquiries",
  "customer_service": "Contact Customer Service",
  "send": "Send",
  "duration": "Duration",
  "price": "Price per person",
  "accommodation": "Accommodation",
  "show_details": "Show Details",
  "back_to_all_trips": "Back to All Trips",
  "book_your_trip": "Book Your Trip Now",
  "name": "Name",
  "phone": "Phone Number",
  "guests": "Number of Guests",
  "meeting_point": "Meeting Point",
  "confirm_booking": "Confirm Booking",
  "payment": "Payment",
  "amount_due": "Amount Due",
  "e_wallet": "E-Wallet",
  "bank_transfer": "Bank Transfer",
  "visa_mastercard": "Visa / Mastercard",
  "transaction_id": "Transaction ID",
  "card_number": "Card Number",
  "expiry_date": "Expiry Date",
  "cvc": "CVC",
  "confirm_payment": "Confirm Payment",
  "trips_we_made": "Trips We've Made",
  "people_traveled_with_us": "People Traveled With Us",
  "average_ratings": "Average Ratings",
  "dahab_trip": "Dahab Trip",
  "dahab_duration": "4 Days & 5 Nights",
  "dahab_price": "3000 EGP",
  "dahab_accommodation": "5-Star Hotel",
  "dahab_description": "Enjoy the beauty of nature in Dahab, with a diving trip in the most famous international sites.",
  "north_coast_trip": "North Coast Trip",
  "north_coast_duration": "3 Days & 4 Nights",
  "north_coast_price": "4000 EGP",
  "north_coast_accommodation": "Chalet on the sea",
  "north_coast_description": "Relax on the sandy beaches of the North Coast and enjoy the summer atmosphere.",
  "el_gouna_trip": "El Gouna Trip",
  "el_gouna_duration": "5 Days & 6 Nights",
  "el_gouna_price": "6000 EGP",
  "el_gouna_accommodation": "Tourist resort",
  "el_gouna_description": "A unique experience in El Gouna, where luxury and beauty.",
  "porto_sokhna_honeymoon": "Honeymoon Offer in Porto Sokhna",
  "porto_sokhna_duration": "3 Days & 4 Nights",
  "porto_sokhna_price": "5500 EGP",
  "porto_sokhna_accommodation": "Hotel suite with sea view",
  "porto_sokhna_description": "A special romantic offer for a honeymoon in Porto Sokhna.",
  "el_galala_honeymoon": "Honeymoon Offer in El Galala",
  "el_galala_duration": "4 Days & 5 Nights",
  "el_galala_price": "7000 EGP",
  "el_galala_accommodation": "5-star hotel with a panoramic view",
  "el_galala_description": "Enjoy a magical atmosphere in the city of El Galala.",
  "sharm_grand_plaza_honeymoon": "Honeymoon Offer in Sharm Grand Plaza",
  "sharm_grand_plaza_duration": "6 Days & 7 Nights",
  "sharm_grand_plaza_price": "8500 EGP",
  "sharm_grand_plaza_accommodation": "All-inclusive luxury resort",
  "sharm_grand_plaza_description": "An unforgettable honeymoon experience in the heart of Sharm El Sheikh.",
  "trip_not_found": "Trip not found",
  "Departure_time": "Departure time",
  "payment_method": "Payment Method",
  "credit_card": "Credit Card",
  "paypal": "PayPal",
  "Complete_reservation": "Complete the reservation",
  "Booking_Information": "Booking Information",
  "Full_Name": "Full Name",
  "Email_Address": "Email Address",
  "Phone_Number": "Phone Number",
  "Number_of_Guests": "Number of Guests",
  "Gathering_Place": "Gathering Place",
  "Trip_Details": "Trip Details",
  "Trip_Name": "Trip Name",
  "Total_Price": "Total Price",
  "currency": "EGP",
  "Next": "Next",
  "Choose_Payment_Method": "Choose Payment Method",
  "Bank_Transfer": "Bank Transfer",
  "E_Wallet": "E-Wallet",
  "Transfer_Details": "Bank Transfer Details",
  "E_Wallet_Details": "E-Wallet Payment Details",
  "Bank_Account_Info": "Bank Account Information",
  "Transfer_to_account": "Please transfer the amount to the following account:",
  "Account_Number": "Account Number",
  "Bank_Name_Branch": "Cairo Bank - Nasr City Branch",
  "Transaction_Number": "Transaction Number",
  "Important_Note": "Important Note",
  "Transaction_Number_Required": "After completing the transfer, please enter the transaction number in the field above. We will contact you as soon as possible to confirm the booking.",
  "Back": "Back",
  "Order_Received_Successfully": "Your order has been received successfully!",
  "Contact_Confirmation": "We will contact you as soon as possible to confirm the booking. Thank you for using our services.",
  "Back_to_Homepage": "Back to Homepage",
  "Bank_Account_Required": "Bank account is required",
  "Transaction_Number_Required_Error": "Transaction number is required",
  "E_Wallet_Number": "E-Wallet Number",
  "Enter_Bank_Account_Number": "Enter Bank Account Number",
  "Enter_E_Wallet_Number": "Enter E-Wallet Number",
  "Enter_Transaction_Number": "Enter Transaction Number after transfer"
}


============================================================
FILE: eslint.config.mjs
============================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    ignores: [
      "node_modules/**",
      ".next/**",
      "out/**",
      "build/**",
      "next-env.d.ts",
    ],
  },
];

export default eslintConfig;


============================================================
FILE: package.json
============================================================
{
  "name": "rahal-tourism-site",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "i18next": "^25.5.2",
    "next": "15.5.4",
    "next-intl": "^4.3.12",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-hook-form": "^7.65.0",
    "react-i18next": "^16.0.0",
    "tailwind-merge": "^3.3.1",
    "zod": "^3.25.76",
    "zustand": "^5.0.8"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.5.4",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}


============================================================
FILE: postcss.config.mjs
============================================================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;


============================================================
FILE: README.md
============================================================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.


============================================================
FILE: tsconfig.json
============================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}