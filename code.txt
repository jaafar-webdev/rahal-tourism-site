The following is a digest of the repository "rahal-tourism-site".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: rahal-tourism-site
Files Analyzed: 27
Total Text Size: 35.77 KB
Estimated Tokens (text only): ~١٠٬٨١٣

--- DIRECTORY STRUCTURE ---
rahal-tourism-site/
├── locales/
│   ├── ar.json
│   └── en.json
├── src/
│   ├── app/
│   │   ├── [locale]/
│   │   │   ├── trips/
│   │   │   │   └── [slug]/
│   │   │   │       └── page.tsx
│   │   │   ├── layout.tsx
│   │   │   └── page.tsx
│   │   ├── context/
│   │   │   └── I18nProvider.tsx
│   │   └── globals.css
│   ├── components/
│   │   ├── BackToTripsLink.tsx
│   │   ├── BookingForm.tsx
│   │   ├── CategorySection.tsx
│   │   ├── Header.tsx
│   │   ├── LanguageSwitcher.tsx
│   │   ├── PaymentForm.tsx
│   │   ├── ThemeToggle.tsx
│   │   ├── TripCard.tsx
│   │   ├── TripDetailsContent.tsx
│   │   └── TripSection.tsx
│   ├── types/
│   │   ├── category.ts [binary]
│   │   └── trip.ts [binary]
│   └── globals.d.ts [binary]
├── eslint.config.mjs
├── next.config.ts [binary]
├── package.json
├── postcss.config.mjs
├── README.md
├── tailwind.config.ts [binary]
└── tsconfig.json


--- FILE CONTENTS ---
============================================================
FILE: locales/ar.json
============================================================
{
  "welcome": "مرحبا بك في موقعنا السياحي",
  "available_trips": "الرحلات المتاحه الان",
  "honeymoon_offers": "عروض شهر العسل",
  "contact_us": "تواصل معنا",
  "email": "البريد الإلكتروني",
  "subject": "عنوان الموضوع",
  "message": "الموضوع",
  "inquiry_type": "نوع الموضوع",
  "payment_issue": "مشكلة في الدفع",
  "inquiries": "استفسارات",
  "customer_service": "تواصل مع خدمة العملاء",
  "send": "إرسال",
  "duration": "المدة",
  "price": "سعر الفرد",
  "accommodation": "مكان الاقامة",
  "show_details": "اعرض التفاصيل",
  "back_to_all_trips": "العودة إلى كل الرحلات",
  "book_your_trip": "احجز رحلتك الآن",
  "name": "الاسم",
  "phone": "رقم الهاتف",
  "guests": "عدد الأفراد",
  "meeting_point": "مكان التجمع",
  "confirm_booking": "تأكيد الحجز",
  "payment": "الدفع",
  "amount_due": "المبلغ المطلوب",
  "e_wallet": "محفظة إلكترونية",
  "bank_transfer": "تحويل بنكي",
  "visa_mastercard": "فيزا/ماستركارد",
  "transaction_id": "رقم العملية",
  "card_number": "رقم البطاقة",
  "expiry_date": "تاريخ الانتهاء",
  "cvc": "CVC",
  "confirm_payment": "تأكيد الدفع",
  "trips_we_made": "الرحلات التي قمنا بها",
  "people_traveled_with_us": "الأشخاص الذين سافروا معنا",
  "average_ratings": "متوسط التقييمات",
  "dahab_trip": "رحلة دهب",
  "dahab_duration": "4 ايام و 5 ليال",
  "dahab_price": "3000 جنيه",
  "dahab_accommodation": "فندق 5 نجوم",
  "dahab_description": "استمتع بجمال الطبيعة في دهب، مع رحلة غوص في أشهر المواقع العالمية.",
  "north_coast_trip": "رحلة الساحل الشمالي",
  "north_coast_duration": "3 ايام و 4 ليال",
  "north_coast_price": "4000 جنيه",
  "north_coast_accommodation": "شاليه على البحر",
  "north_coast_description": "استرخِ على شواطئ الساحل الشمالي الرملية واستمتع بأجواء الصيف.",
  "el_gouna_trip": "رحلة الجونة",
  "el_gouna_duration": "5 ايام و 6 ليال",
  "el_gouna_price": "6000 جنيه",
  "el_gouna_accommodation": "منتجع سياحي",
  "el_gouna_description": "تجربة فريدة في الجونة، حيث الفخامة والجمال.",
  "porto_sokhna_honeymoon": "عرض شهر العسل في بورتو السخنة",
  "porto_sokhna_duration": "3 ايام و 4 ليال",
  "porto_sokhna_price": "5500 جنيه",
  "porto_sokhna_accommodation": "جناح فندقي مطل على البحر",
  "porto_sokhna_description": "عرض رومانسي خاص لشهر العسل في بورتو السخنة.",
  "el_galala_honeymoon": "عرض شهر العسل في الجلالة",
  "el_galala_duration": "4 ايام و 5 ليال",
  "el_galala_price": "7000 جنيه",
  "el_galala_accommodation": "فندق 5 نجوم مع إطلالة بانورامية",
  "el_galala_description": "استمتعوا بأجواء ساحرة في مدينة الجلالة.",
  "sharm_grand_plaza_honeymoon": "عرض شهر العسل في شرم جراند بلازا",
  "sharm_grand_plaza_duration": "6 ايام و 7 ليال",
  "sharm_grand_plaza_price": "8500 جنيه",
  "sharm_grand_plaza_accommodation": "منتجع فاخر شامل كليًا",
  "sharm_grand_plaza_description": "تجربة لا تُنسى لشهر العسل في قلب شرم الشيخ.",
  "trip_not_found": "لم يتم العثور على رحلة",
  "Departure_time" : "موعد المغادرة"
}

============================================================
FILE: locales/en.json
============================================================
{
  "welcome": "Welcome to our Tourism Site",
  "available_trips": "Available Trips",
  "honeymoon_offers": "Honeymoon Offers",
  "contact_us": "Contact Us",
  "email": "Email",
  "subject": "Subject",
  "message": "Message",
  "inquiry_type": "Inquiry Type",
  "payment_issue": "Payment Issue",
  "inquiries": "Inquiries",
  "customer_service": "Contact Customer Service",
  "send": "Send",
  "duration": "Duration",
  "price": "Price per person",
  "accommodation": "Accommodation",
  "show_details": "Show Details",
  "back_to_all_trips": "Back to All Trips",
  "book_your_trip": "Book Your Trip Now",
  "name": "Name",
  "phone": "Phone Number",
  "guests": "Number of Guests",
  "meeting_point": "Meeting Point",
  "confirm_booking": "Confirm Booking",
  "payment": "Payment",
  "amount_due": "Amount Due",
  "e_wallet": "E-Wallet",
  "bank_transfer": "Bank Transfer",
  "visa_mastercard": "Visa / Mastercard",
  "transaction_id": "Transaction ID",
  "card_number": "Card Number",
  "expiry_date": "Expiry Date",
  "cvc": "CVC",
  "confirm_payment": "Confirm Payment",
  "trips_we_made": "Trips We've Made",
  "people_traveled_with_us": "People Traveled With Us",
  "average_ratings": "Average Ratings",
  "dahab_trip": "Dahab Trip",
  "dahab_duration": "4 Days & 5 Nights",
  "dahab_price": "3000 EGP",
  "dahab_accommodation": "5-Star Hotel",
  "dahab_description": "Enjoy the beauty of nature in Dahab, with a diving trip in the most famous international sites.",
  "north_coast_trip": "North Coast Trip",
  "north_coast_duration": "3 Days & 4 Nights",
  "north_coast_price": "4000 EGP",
  "north_coast_accommodation": "Chalet on the sea",
  "north_coast_description": "Relax on the sandy beaches of the North Coast and enjoy the summer atmosphere.",
  "el_gouna_trip": "El Gouna Trip",
  "el_gouna_duration": "5 Days & 6 Nights",
  "el_gouna_price": "6000 EGP",
  "el_gouna_accommodation": "Tourist resort",
  "el_gouna_description": "A unique experience in El Gouna, where luxury and beauty.",
  "porto_sokhna_honeymoon": "Honeymoon Offer in Porto Sokhna",
  "porto_sokhna_duration": "3 Days & 4 Nights",
  "porto_sokhna_price": "5500 EGP",
  "porto_sokhna_accommodation": "Hotel suite with sea view",
  "porto_sokhna_description": "A special romantic offer for a honeymoon in Porto Sokhna.",
  "el_galala_honeymoon": "Honeymoon Offer in El Galala",
  "el_galala_duration": "4 Days & 5 Nights",
  "el_galala_price": "7000 EGP",
  "el_galala_accommodation": "5-star hotel with a panoramic view",
  "el_galala_description": "Enjoy a magical atmosphere in the city of El Galala.",
  "sharm_grand_plaza_honeymoon": "Honeymoon Offer in Sharm Grand Plaza",
  "sharm_grand_plaza_duration": "6 Days & 7 Nights",
  "sharm_grand_plaza_price": "8500 EGP",
  "sharm_grand_plaza_accommodation": "All-inclusive luxury resort",
  "sharm_grand_plaza_description": "An unforgettable honeymoon experience in the heart of Sharm El Sheikh.",
  "trip_not_found": "Trip not found",
  "Departure_time": "Departure time"
}


============================================================
FILE: src/app/[locale]/trips/[slug]/page.tsx
============================================================
import { getCategories, meetingPoints } from "@/lib/data/get-categories";
import { getTranslations } from "@/lib/i18n";
import { BackToTripsLink } from "@/components/BackToTripsLink";
import BookingForm from "@/components/BookingForm";
import { findTripBySlug } from "@/lib/hooks/useTrip";
import TripDetailsContent from "@/components/TripDetailsContent";
import { Translations } from "@/lib/i18n";

const TripNotFound = ({ t }: { t: Translations }) => (
  <div className="text-center py-12">
    {t.trip_not_found || "Trip not found"}
  </div>
);

export default async function TripDetailsPage({
  params,
}: {
  params: Promise<{ locale: string; slug: string }>;
}) {
  const { locale, slug } = await params;
  const t = getTranslations(locale as "ar" | "en");
  const categories = await getCategories();
  const trip = findTripBySlug(categories, slug);

  if (!trip) {
    return <TripNotFound t={t} />;
  }

  return (
    <main className="container mx-auto p-4 md:p-8">
      <BackToTripsLink locale={locale} t={t} />
      <div className="grid md:grid-cols-2 gap-8">
        <TripDetailsContent trip={trip} t={t} />
        <BookingForm trip={trip} t={t} meetingPoints={meetingPoints} />
      </div>
    </main>
  );
}


============================================================
FILE: src/app/[locale]/layout.tsx
============================================================
import type { Metadata } from "next";
import { IBM_Plex_Sans_Arabic, Nunito_Sans } from "next/font/google";
import "@/app/globals.css";
import { I18nProvider } from "../context/I18nProvider";
import ThemeToggle from "@/components/ThemeToggle";
import LanguageSwitcher from "@/components/LanguageSwitcher";

const ibmPlexSansArabic = IBM_Plex_Sans_Arabic({
  subsets: ["arabic"],
  weight: ["400", "700"],
  variable: "--font-ibm-plex-sans-arabic",
});

const nunitoSans = Nunito_Sans({
  subsets: ["latin"],
  weight: ["400", "700"],
  variable: "--font-nunito-sans",
});

export const metadata: Metadata = {
  title: "Rahal",
  description: "A tourism website built with Next.js",
};

export default async function RootLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}) {
  const { locale } = await params;

  const dir = locale === "ar" ? "rtl" : "ltr";
  const fontClassName =
    locale === "ar" ? ibmPlexSansArabic.className : nunitoSans.className;

  return (
    <html dir={dir}>
      <body className={fontClassName}>
        <I18nProvider>
          <div className="px-3 pt-2 md:px-0 md:pt-0 md:absolute md:top-4 md:end-4 z-50">
            <div className="flex justify-start items-center gap-1">
              <ThemeToggle />
              <LanguageSwitcher />
            </div>
          </div>
          {children}
        </I18nProvider>
      </body>
    </html>
  );
}


============================================================
FILE: src/app/[locale]/page.tsx
============================================================
import Header from "../../components/Header";
import TripSection from "@/components/TripSection";
import { getCategories } from "@/lib/data/get-categories";

export default async function Page({ params }: { params: Promise<{ locale: string }> }) {
   const categories = await getCategories();
   return (
      <main>
         <Header params={params} />
         <TripSection categories={categories} />
      </main>
   );
}

export const revalidate = 3600; 


============================================================
FILE: src/app/context/I18nProvider.tsx
============================================================
"use client";
import { createContext, useContext, ReactNode, useEffect } from "react";
import { useParams } from "next/navigation";
import { getTranslations } from "@/lib/i18n";

type Locale = "ar" | "en";
type Translations = ReturnType<typeof getTranslations>;

interface I18nContextType {
  t: Translations;
  locale: Locale;
}

const I18nContext = createContext<I18nContextType | undefined>(undefined);

export const useI18n = () => {
  const context = useContext(I18nContext);
  if (!context) {
    throw new Error("useI18n must be used within an I18nProvider");
  }
  return context;
};

export const I18nProvider = ({ children }: { children: ReactNode }) => {
  const params = useParams();
  let locale: Locale = "ar";

  if (
    typeof params.locale === "string" &&
    ["ar", "en"].includes(params.locale)
  ) {
    locale = params.locale as Locale;
  } else {
    const savedLocale = localStorage.getItem("locale");
    if (savedLocale === "ar" || savedLocale === "en") {
      locale = savedLocale as Locale;
    }
  }

  useEffect(() => {
    localStorage.setItem("locale", locale);
  }, [locale]);

  const t = getTranslations(locale);

  return (
    <I18nContext.Provider value={{ t, locale }}>
      {children}
    </I18nContext.Provider>
  );
};


============================================================
FILE: src/app/globals.css
============================================================
@import "tailwindcss";
@custom-variant dark (&:where([data-theme=dark], [data-theme=dark] *));

@theme {
  --color-primary: #ffeb3b;
  --color-secondary: #000080;
  --color-background: #ffffff;
  --color-foreground: #1f2937;
}

:where([data-theme="dark"]) {
  --color-primary: #ffd54f;
  --color-secondary: #000205;
  --color-background: #111827;
  --color-foreground: #f9fafb;
}

html,
body {
  @apply bg-background text-foreground transition-colors duration-300;
}


============================================================
FILE: src/components/BackToTripsLink.tsx
============================================================
import Link from "next/link";

import { Translations } from "@/lib/i18n";

interface BackToTripsLinkProps {
  locale: string;
  t: Translations;
}

export function BackToTripsLink({ locale, t }: BackToTripsLinkProps) {
  const arrow = locale === "ar" ? "→" : "←";
  return (
    <div className="mb-8">
      <Link
        href={`/${locale}`}
        className="inline-flex items-center bg-primary text-secondary rounded-lg px-3 py-2 hover:bg-opacity-90 transition-colors"
      >
        <span className="mr-2">{arrow}</span>
        {t.back_to_all_trips}
      </Link>
    </div>
  );
}


============================================================
FILE: src/components/BookingForm.tsx
============================================================
"use client";

import Trip from "@/types/trip";

import { Translations } from "@/lib/i18n";
import PaymentForm from "./PaymentForm";

interface BookingFormProps {
  trip: Trip;
  t: Translations;
  meetingPoints: string[];
}

export default function BookingForm({
  trip,
  t,
  meetingPoints,
}: BookingFormProps) {
  const fullPrice = `${trip.price.amount} ${trip.price.currency}`;

  return (
    <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
      <h2 className="text-2xl font-bold mb-6 text-gray-900 dark:text-white">
        {t.book_your_trip}
      </h2>
      <BookingFormFields t={t} meetingPoints={meetingPoints} />
      <button
        type="submit"
        className="w-full bg-primary text-secondary font-bold py-3 px-4 rounded-lg hover:bg-yellow-400 transition-colors"
      >
        {t.confirm_booking}
      </button>
      <PaymentForm price={fullPrice} />
    </div>
  );
}

const InputField = ({
  id,
  label,
  type,
  ...props
}: {
  id: string;
  label: string;
  type: string;
  [key: string]: string | number;
}) => (
  <div className="mb-4">
    <label
      htmlFor={id}
      className="block text-sm font-medium text-gray-700 dark:text-gray-300"
    >
      {label}
    </label>
    <input
      type={type}
      id={id}
      className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
      {...props}
    />
  </div>
);

const SelectField = ({
  id,
  label,
  options,
}: {
  id: string;
  label: string;
  options: string[];
}) => (
  <div className="mb-6">
    <label
      htmlFor={id}
      className="block text-sm font-medium text-gray-700 dark:text-gray-300"
    >
      {label}
    </label>
    <select
      id={id}
      className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-gray-900 dark:text-white"
    >
      {options.map((option) => (
        <option key={option}>{option}</option>
      ))}
    </select>
  </div>
);

function BookingFormFields({
  t,
  meetingPoints,
}: {
  t: Translations;
  meetingPoints: string[];
}) {
  return (
    <form>
      <InputField id="name" label={t.name} type="text" />
      <InputField id="email" label={t.email} type="email" />
      <InputField id="phone" label={t.phone} type="tel" />
      <InputField
        id="guests"
        label={t.guests}
        type="number"
        min="1"
        defaultValue={2}
      />
      <SelectField
        id="meeting-point"
        label={t.meeting_point}
        options={meetingPoints}
      />
    </form>
  );
}


============================================================
FILE: src/components/CategorySection.tsx
============================================================
"use client";

import { useLocalizedField } from "@/lib/useLocalizedField";
import { Category } from "@/types/category";
import TripCard from "./TripCard";

interface CategorySectionProps {
  category: Category;
}

const CategorySection= ({category} : CategorySectionProps)=> {
  const categoryName = useLocalizedField(category.nameAr, category.nameEn);

  return (
    <section className="w-full mb-16 px-4">
      <h2 className="text-3xl font-bold text-center mb-8">{categoryName}</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {category.trips.map((trip) => (
          <TripCard
            key={trip.id}
            trip={trip}
          />
        ))}
      </div>
    </section>
  );
};

export default CategorySection;

============================================================
FILE: src/components/Header.tsx
============================================================
import { getTranslations } from "@/lib/i18n";

export default async function Header({
   params,
}: {
   params: Promise<{ locale: string }>;
}) {
   const { locale } = await params;
   const t = getTranslations(locale as "ar" | "en");

   return (
      <div className="flex flex-col justify-center items-center mt-3">
         <h1 className="text-2xl md:text-4xl font-bold text-primary mb-12">{t.welcome}</h1>
      </div>
   );
}
   

============================================================
FILE: src/components/LanguageSwitcher.tsx
============================================================
"use client";
import { useRouter } from "next/navigation";
import { useI18n } from "@/app/context/I18nProvider";
import { useEffect, useState } from "react";

export default function LanguageSwitcher() {
  const router = useRouter();
  const { locale } = useI18n();
  const [currentLocale, setCurrentLocale] = useState<"ar" | "en">("ar");
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
    setCurrentLocale(locale);
  }, [locale]);

  const switchLanguage = (newLocale: "ar" | "en") => {
    if (!isMounted) return;

    try {
      localStorage.setItem("locale", newLocale);
      const currentPath = window.location.pathname;
      const pathWithoutLocale = currentPath.replace(/^\/(ar|en)/, "") || "/";
      const normalizedPath = pathWithoutLocale.startsWith("/")
        ? pathWithoutLocale
        : `/${pathWithoutLocale}`;

      router.push(`/${newLocale}${normalizedPath}`);

      router.refresh();
    } catch (error) {
      console.error("Error switching language:", error);
    }
  };

  if (!isMounted) {
    return (
      <div className="flex items-center space-x-2 rtl:space-x-reverse">
        <div className="w-12 h-8 bg-gray-200 dark:bg-gray-700 rounded-md animate-pulse"></div>
        <div className="w-12 h-8 bg-gray-200 dark:bg-gray-700 rounded-md animate-pulse"></div>
      </div>
    );
  }

  return (
    <div className="">
      <button
        onClick={() => switchLanguage("ar")}
        className={`px-3 py-1 rounded-md mx-2 cursor-pointer ${
          currentLocale === "ar"
            ? "bg-primary text-secondary font-bold"
            : "bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white"
        }`}
      >
        عربي
      </button>
      <button
        onClick={() => switchLanguage("en")}
        className={`px-3 py-1 rounded-md cursor-pointer ${
          currentLocale === "en"
            ? "bg-primary text-secondary font-bold"
            : "bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white"
        }`}
      >
        English
      </button>
    </div>
  );
}


============================================================
FILE: src/components/PaymentForm.tsx
============================================================
"use client";

import { useI18n } from "@/app/context/I18nProvider";
import { useState } from "react";

const PaymentForm = ({ price }: { price: string }) => {
   const { t } = useI18n();
   const [paymentMethod, setPaymentMethod] = useState("e-wallet");

   const renderPaymentFields = () => {
      switch (paymentMethod) {
         case "e-wallet":
            return (
               <div>
                  <p className="text-gray-700 dark:text-gray-300">
                     يرجى تحويل المبلغ إلى الرقم التالي:{" "}
                     <span className="font-bold">01234567890</span>
                  </p>
                  <div className="mt-4">
                     <label
                        htmlFor="transaction-id"
                        className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                     >
                        {t.transaction_id}
                     </label>
                     <input
                        type="text"
                        id="transaction-id"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                     />
                  </div>
               </div>
            );
         case "bank-transfer":
            return (
               <div>
                  <p className="text-gray-700 dark:text-gray-300">
                     يرجى تحويل المبلغ إلى الحساب البنكي التالي:
                     <br />
                     <span className="font-bold text-gray-900 dark:text-white">
                        البنك:
                     </span>{" "}
                     بنك مصر
                     <br />
                     <span className="font-bold text-gray-900 dark:text-white">
                        رقم الحساب:
                     </span>{" "}
                     1234567890123456
                  </p>
               </div>
            );
         case "visa":
            return (
               <div>
                  <div className="mb-4">
                     <label
                        htmlFor="card-number"
                        className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                     >
                        {t.card_number}
                     </label>
                     <input
                        type="text"
                        id="card-number"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                     />
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                     <div>
                        <label
                           htmlFor="expiry-date"
                           className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                        >
                           {t.expiry_date}
                        </label>
                        <input
                           type="text"
                           id="expiry-date"
                           placeholder="MM/YY"
                           className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                        />
                     </div>
                     <div>
                        <label
                           htmlFor="cvc"
                           className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                        >
                           {t.cvc}
                        </label>
                        <input
                           type="text"
                           id="cvc"
                           className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                        />
                     </div>
                  </div>
               </div>
            );
         default:
            return null;
      }
   };

   return (
      <div className="mt-8">
         <h3 className="text-xl font-bold mb-4">{t.payment}</h3>
         <div className="mb-4">
            <p className="text-lg text-gray-900 dark:text-white">
               {t.amount_due}:{" "}
               <span className="font-bold text-primary">{price}</span>
            </p>
         </div>
         <div className="flex space-x-4 mb-6">
            <button
               type="button"
               onClick={() => setPaymentMethod("e-wallet")}
               className={`px-4 py-2 rounded-lg ${
                  paymentMethod === "e-wallet"
                     ? "bg-primary text-secondary"
                     : "bg-gray-200 dark:bg-gray-600 cursor-pointer"
               }`}
            >
               {t.e_wallet}
            </button>
            <button
               type="button"
               onClick={() => setPaymentMethod("bank-transfer")}
               className={`px-4 py-2 rounded-lg ${
                  paymentMethod === "bank-transfer"
                     ? "bg-primary text-secondary"
                     : "bg-gray-200 dark:bg-gray-600 cursor-pointer"
               }`}
            >
               {t.bank_transfer}
            </button>
            <button
               type="button"
               onClick={() => setPaymentMethod("visa")}
               className={`px-4 py-2 rounded-lg ${
                  paymentMethod === "visa"
                     ? "bg-primary text-secondary"
                     : "bg-gray-200 dark:bg-gray-600 cursor-pointer"
               }`}
            >
               {t.visa_mastercard}
            </button>
         </div>
         {renderPaymentFields()}
         <button
            type="submit"
            className="w-full mt-6 bg-secondary text-white font-bold py-3 px-4 rounded-lg hover:bg-opacity-90 transition-colors"
         >
            {t.confirm_payment}
         </button>
      </div>
   );
};

export default PaymentForm;


============================================================
FILE: src/components/ThemeToggle.tsx
============================================================
"use client";
import { useEffect, useState } from "react";

const SunIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="20"
    height="20"
    fill="currentColor"
    viewBox="0 0 16 16"
  >
    <path d="M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z" />
  </svg>
);

const MoonIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="20"
    height="20"
    fill="currentColor"
    viewBox="0 0 16 16"
  >
    <path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278zM4.858 1.311A7.269 7.269 0 0 0 1.025 7.71c0 4.02 3.279 7.276 7.319 7.276a7.316 7.316 0 0 0 5.205-2.162c-.337.042-.68.063-1.029.063-4.61 0-8.343-3.714-8.343-8.29 0-1.167.242-2.278.681-3.286z" />
  </svg>
);

export default function ThemeToggle() {
  const [isDark, setIsDark] = useState(false);
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
    const savedTheme = localStorage.getItem("theme");
    const prefersDark = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;
    const initialTheme = savedTheme === "dark" || (!savedTheme && prefersDark);
    setIsDark(initialTheme);
    document.documentElement.setAttribute(
      "data-theme",
      initialTheme ? "dark" : "light"
    );
  }, []);

  const toggleTheme = () => {
    const newTheme = !isDark;
    setIsDark(newTheme);
    document.documentElement.setAttribute(
      "data-theme",
      newTheme ? "dark" : "light"
    );
    localStorage.setItem("theme", newTheme ? "dark" : "light");
  };

  if (!isMounted) {
    return (
      <button
        className="p-2 rounded-full bg-gray-200 text-gray-800"
        aria-label="Toggle theme"
      >
        <div className="w-5 h-5"></div>
      </button>
    );
  }

  return (
    <div className="">
      <button
        onClick={toggleTheme}
        className="p-2 rounded-full bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white transition-colors duration-200 hover:bg-gray-300 dark:hover:bg-gray-600 focus:outline-none   focus:ring-offset-2 dark:focus:ring-offset-gray-800"
        aria-label={`Switch to ${isDark ? "light" : "dark"} mode`}
      >
        {isDark ? <SunIcon /> : <MoonIcon />}
      </button>
    </div>
  );
}


============================================================
FILE: src/components/TripCard.tsx
============================================================
"use client";

import Image from "next/image";
import Link from "next/link";
import { useLocalizedField } from "@/lib/useLocalizedField";
import Trip from "@/types/trip";
import { useI18n } from "@/app/context/I18nProvider";

interface TripCardProps {
  trip: Trip;
}

const TripCard = ({ trip }: TripCardProps) => {
  const { t, locale } = useI18n();
  const name = useLocalizedField(trip.nameAr, trip.nameEn);
  const duration = useLocalizedField(trip.durationAr, trip.durationEn);
  const accommodation = useLocalizedField(
    trip.accommodationAr,
    trip.accommodationEn
  );
  const description = useLocalizedField(trip.descriptionAr, trip.descriptionEn);
  return (
    <div className="rounded-lg shadow-lg overflow-hidden bg-white dark:bg-gray-800">
      <div className="relative h-56">
        <Image
          src={trip.imageUrl}
          alt={name}
          fill
          sizes="(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw"
          className="object-cover"
          loading="lazy"
        />
      </div>
      <div className="p-4">
        <h3 className="text-xl font-bold text-gray-900 dark:text-white">
          {name}
        </h3>
        <p className="text-gray-600 dark:text-gray-400">{duration}</p>
        <p className="text-gray-600 dark:text-gray-400">
          {trip.price.amount} {trip.price.currency}
        </p>
        <p className="text-gray-600 dark:text-gray-400">{accommodation}</p>
        <p className="text-gray-600 dark:text-gray-400">{description}</p>
        <Link href={`/${locale}/trips/${trip.id}`}>
          <button className="mt-4 w-full bg-primary text-secondary font-bold py-2 px-4 rounded hover:bg-yellow-400 transition-colors cursor-pointer">
            {t.show_details}
          </button>
        </Link>
      </div>
    </div>
  );
};

export default TripCard;


============================================================
FILE: src/components/TripDetailsContent.tsx
============================================================
"use client";

import Trip from "@/types/trip";
import { Translations } from "@/lib/i18n";
import { useLocalizedField } from "@/lib/useLocalizedField";
import Image from "next/image";

interface TripDetailsContentProps {
  trip: Trip;
  t: Translations;
}

const TripImage = ({ imageUrl, alt }: { imageUrl: string; alt: string }) => (
  <div className="relative h-96 rounded-lg overflow-hidden shadow-lg">
    <Image
      src={imageUrl}
      alt={alt}
      fill
      className="object-cover"
      sizes="(max-width: 768px) 80vw, (max-width: 1024px) 50vw, 33vw"
    />
  </div>
);

const DetailItem = ({
  label,
  value,
}: {
  label: string;
  value: React.ReactNode;
}) => (
  <p>
    <span className="font-bold text-gray-900 dark:text-white">{label}:</span>{" "}
    {value}
  </p>
);

const TripInfo = ({ trip }: TripDetailsContentProps) => {
  const name = useLocalizedField(trip.nameAr, trip.nameEn);
  const description = useLocalizedField(trip.descriptionAr, trip.descriptionEn);

  return (
    <div>
      <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
        {name}
      </h1>
      <p className="text-gray-600 dark:text-gray-400 mt-2">{description}</p>
    </div>
  );
};

const TripDetailsGrid = ({ trip, t }: TripDetailsContentProps) => {
  const duration = useLocalizedField(trip.durationAr, trip.durationEn);
  const accommodation = useLocalizedField(
    trip.accommodationAr,
    trip.accommodationEn
  );
  const price = `${trip.price.amount} ${trip.price.currency}`;

  return (
    <div className="mt-4 grid grid-cols-2 gap-4">
      <DetailItem label={t.duration} value={duration} />
      <DetailItem label={t.price} value={price} />
      <DetailItem label={t.accommodation} value={accommodation} />
      <DetailItem label={t.Departure_time} value={trip.departureDate} />
    </div>
  );
};

export default function TripDetailsContent({
  trip,
  t,
}: TripDetailsContentProps) {
  const name = useLocalizedField(trip.nameAr, trip.nameEn);

  return (
    <div>
      <TripImage imageUrl={trip.imageUrl} alt={name} />
      <div className="mt-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow">
        <TripInfo trip={trip} t={t} />
        <TripDetailsGrid trip={trip} t={t} />
      </div>
    </div>
  );
}


============================================================
FILE: src/components/TripSection.tsx
============================================================
"use client";
import { Category } from "@/types/category";
import CategorySection from "./CategorySection";


export default function TripSection({ categories }: { categories: Category[] }) {


  return (
    <div>
      {categories.map((category) => (
        <CategorySection key={category.id} category={category} />
      ))}
    </div>
  );
}



============================================================
FILE: eslint.config.mjs
============================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    ignores: [
      "node_modules/**",
      ".next/**",
      "out/**",
      "build/**",
      "next-env.d.ts",
    ],
  },
];

export default eslintConfig;


============================================================
FILE: package.json
============================================================
{
  "name": "rahal-tourism-site",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "i18next": "^25.5.2",
    "next": "15.5.4",
    "next-i18next": "^11.0.0",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-i18next": "^16.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.5.4",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}


============================================================
FILE: postcss.config.mjs
============================================================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;


============================================================
FILE: README.md
============================================================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.


============================================================
FILE: tsconfig.json
============================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}